<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chenlini]]></title>
  <link href="http://chenlini.github.io/atom.xml" rel="self"/>
  <link href="http://chenlini.github.io/"/>
  <updated>2017-06-13T17:03:30+08:00</updated>
  <id>http://chenlini.github.io/</id>
  <author>
    <name><![CDATA[Chenlini]]></name>
    <email><![CDATA[chenlini1234@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GBDT+LR]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/13/gbdt-plus-lr/"/>
    <updated>2017-06-13T16:52:56+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/13/gbdt-plus-lr</id>
    <content type="html"><![CDATA[<h1>GBDT+LR融合</h1>

<h2>原理</h2>

<p>工业界LR模型用的比较多的原因就是它非常容易可以并行化，处理起大规模的数据来比较容易。但是LR的学习能力有限，必须要经历大量的特征选择，特征组合等工作。因此找到合适的方法简化特征工程是非常重要的。facebook在KDD上发表了一篇文章，讲的就是GBDT+LR，为我们提供了一些思路，论文中的基本原理很简单，搞清楚下面这幅图就行了：</p>

<p><img src="%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-13%2016.41.39.png" alt="" /></p>

<blockquote><ol>
<li><p>使用GBDT训练数据，得到如下2棵树，第一棵树3个叶子结点，第二棵树2个叶子结点，总共5个叶子结点。因此最后用于LR的特征向量就是5维的[0,0,0,0,0]。</p></li>
<li><p>训练数据共有n个样本，那么对于其中一个样本x,查看x最终会出现在哪些树的结点上面。比如x出现在树1的第1个结点以及树2的第2个结点，那么特征向量就是[1,0,0,0,1]
得到的特征向量可以选择和原本的特征一起带入逻辑回归中，也可以单独作为特征进行学习。</p></li>
</ol>
</blockquote>

<h2>demo</h2>

<p>sklearn分别实现了GBDT和LR的算法，所以做一个小例子测试融合算法是否会比原始的算法好。重点介绍方法，结果不确定，因为参数没有调到最优。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import numpy as np
</span><span class='line'>from sklearn import ensemble
</span><span class='line'>from sklearn import  datasets
</span><span class='line'>from sklearn.linear_model import LogisticRegression
</span><span class='line'>from sklearn.datasets import make_hastie_10_2
</span><span class='line'>from sklearn.ensemble import GradientBoostingClassifier</span></code></pre></td></tr></table></div></figure>


<h6>注意：Boosting的方法也分分类树和回归树，这里选择的是分类树，因为make_hastie_10_2这个数据集是一个二分类的数据集</h6>

<h3>单纯使用GradientBoostingClassifier</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>X, y = make_hastie_10_2(random_state=0)
</span><span class='line'>X_train, X_test = X[:2000], X[2000:]
</span><span class='line'>y_train, y_test = y[:2000], y[2000:]
</span><span class='line'>clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,    max_depth=1, random_state=0).fit(X_train, y_train)
</span><span class='line'>sum(clf.predict(X_test)==y_test)</span></code></pre></td></tr></table></div></figure>


<p>最后一行是统计分类正确的数目，这里的结果是9130</p>

<h4>单纯使用LogisticRegression</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>paramsLr={ 'multi_class':'multinomial',
</span><span class='line'>          'penalty':'l2','solver':'sag', 'tol':0.0001
</span><span class='line'>          }
</span><span class='line'>lr1 = LogisticRegression(C=1.0,solver='sag', max_iter=100,penalty='l2',
</span><span class='line'>                             multi_class='multinomial',tol=0.0001)
</span><span class='line'>lr1.fit(X_train, y_train)
</span><span class='line'>sum(lr1.predict(X_test)==y_test)</span></code></pre></td></tr></table></div></figure>


<p>最后一行是统计分类正确的数目，这里的结果是5149</p>

<h4>GBDT+LR融合</h4>

<p>基于原理中介绍到的思想，需要将GBDT运行的结果转化为LR能够接受的数据结构。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def PreLR_GBDT(clf,Features):
</span><span class='line'>    result=clf.apply(Features)[:,:,0]
</span><span class='line'>    classT=np.zeros(result.shape[1]+1)
</span><span class='line'>    for num in range(0,result.shape[1]):
</span><span class='line'>        classT[num+1]=max(result[:,num])
</span><span class='line'>
</span><span class='line'>    classT=classT.cumsum()
</span><span class='line'>    classT=classT.astype(np.int32)
</span><span class='line'>
</span><span class='line'>    M=np.zeros((result.shape[0],classT[-1]))
</span><span class='line'>
</span><span class='line'>    for num in range(0, result.shape[0]):
</span><span class='line'>        for num2 in range(0, result.shape[1]):
</span><span class='line'>            M[num, classT[num2] + result[num][num2] - 1] = 1
</span><span class='line'>
</span><span class='line'>    return M</span></code></pre></td></tr></table></div></figure>


<p>有了上面的函数之后就可以再建立LR的模型了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>X_train_LR_GBDT=np.append(X_train,PreLR_GBDT(clf, X_train),axis=1)
</span><span class='line'>X_test_LR_GBDT=np.append(X_test,PreLR_GBDT(clf, X_test),axis=1)
</span><span class='line'>
</span><span class='line'>lr_GBDT = LogisticRegression(solver='sag', max_iter=100,penalty='l2',
</span><span class='line'>                             multi_class='multinomial',tol=0.0001)
</span><span class='line'>lr_GBDT.fit(X_train_LR_GBDT, y_train)
</span><span class='line'>
</span><span class='line'>sum(lr_GBDT.predict(X_test_LR_GBDT)==y_test)</span></code></pre></td></tr></table></div></figure>


<p>最后一行是统计分类正确的数目，这里的结果是9140，这里采用的是GBDT训练过后的feature和原始组合的方式，当然和可以不组合，直接用新的feature进行训练。</p>

<p>以上展示的是如何把GBDT与LR融合到一起，每个模型都没有进行调参，因此结果参考意义不大。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抽象类和接口]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/12/chou-xiang-lei-he-jie-kou/"/>
    <updated>2017-06-12T17:31:48+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/12/chou-xiang-lei-he-jie-kou</id>
    <content type="html"><![CDATA[<h1>java基础知识&ndash;抽象类和接口的区别</h1>

<h2>1. 抽象类</h2>

<p>抽象类就是为了实现面向对象设计的，因此必然是为了能够被继承。</p>

<blockquote><p>1）抽象方法默认为public。可以是protected，但是不能是private。</p>

<p>2）抽象类不能直接创建一个对象；</p>

<p>3）子类必须实现父类所有的抽象方法。否则的话必须定义该子类也是抽象类。</p>

<p>4)抽象类中也可以有不是abstract的成员方法和数据成员。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>abstract class Class1 {
</span><span class='line'>    abstract void method();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>2.接口</h2>

<p>接口同样是为了实现面向对象而设计的。但是接口中的数据成员都是默认为public static final的,但是一般不会定义数据成员，而所有的成员函数都是public abstract的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface interface1{
</span><span class='line'>    void method();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>两者区别</h2>

<blockquote><ol>
<li>抽象类可以多种类型的数据成员以及成员函数，因此抽象类可以定义一些默认的行为。接口只能有abstract的函数以及public static final的数据成员。</li>
<li>一个类只能继承自一个对象，但是可以实现多个接口。</li>
<li>设计理念：其实abstract class表示的是"is-a"关系，interface表示的是"like-a"关系。 要明确设计理念，该类的本质是什么，实现了哪些方法。可以查找AlarmDoor的例子。</li>
<li>注意接口的数据成员必须赋予初始值，使得实现的类无法改变该值。抽象类中的数据成员默认为friendly类型。</li>
</ol>
</blockquote>

<p>参考资料：
<a href="http://www.cnblogs.com/beanmoon/archive/2012/12/06/2805221.html">http://www.cnblogs.com/beanmoon/archive/2012/12/06/2805221.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RODBC]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/12/rodbc/"/>
    <updated>2017-06-12T16:01:23+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/12/rodbc</id>
    <content type="html"><![CDATA[<h2>Mac R语言访问SQLServer远程数据库－－－－－ODBC</h2>

<p>描述：想用R来访问数据库，但是远程数据库是SQL Server的，没有Mac版的客户端，因此建议去下载navicat for SQL Server .找一下破解版。</p>

<h4>1.下载ODBC</h4>

<pre><code>brew brew install unixodbc
</code></pre>

<h4>2.配置数据源</h4>

<p>找到odbc.ini文件，一般在usr/local/etc里面。</p>

<p>第一种方式：直接配置</p>

<pre><code>[ODBC Data Sources]
TESTdsn=Test DSN1
[TESTdsn]
Driver          = /usr/local/lib/libtdsodbc.so
Description     = Test DSN1
Trace           = No
Server          = 地址    
Database        = 数据库名
Port            = 1433
TDS_Version     = 7.0
client charset  = UTF-8 
</code></pre>

<p>第二种方法：用freetds</p>

<pre><code>brew install freetds --with-unixodbc
</code></pre>

<p>配置freetds的数据源
/usr/local/etc/freetds.conf</p>

<pre><code>[testdsn]                     # SQL Server数据源名称,可以任意取有意义的名称
  host=192.168.10.22   # 数据库主机
 port=1344                   #数据库监听端口
 tds version=8.0 #默认7.0
</code></pre>

<p>配置odbcinst.ini和odbc.ini
odbcinst.ini：</p>

<pre><code>[FREETDS]
Description=freetds driver
Driver=/usr/local/freetds/lib/libtdsodbc.so  #指定TDS驱动路径

odbc.ini：


[testdsn]  # 数据源名称
Driver=FREETDS # 指向odbcinst.ini的驱动配置
Description=MSSQL Server
Servername=testdsn # 数据源名称
Database=sqlscada    #数据库名称
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[堆VS栈]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/12/dui-vszhan/"/>
    <updated>2017-06-12T15:44:14+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/12/dui-vszhan</id>
    <content type="html"><![CDATA[<h2>堆和栈的区别</h2>

<p>在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。
 栈，就是那些由编译器在需要的时候分配，在不需要的时候自动清楚的变量 的存储区。里面的变量通常是局部变量、函数参数等。<br/>
堆，就是那些由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。</p>

<pre><code>    int* p=new int[5];//在栈内存中存放了一个指向一块堆内存的指针p。
</code></pre>

<p>1、管理方式不同；<br/>
2、空间大小不同；<br/>
3、能否产生碎片不同；<br/>
4、生长方向不同；
5、分配方式不同；<br/>
6、分配效率不同；</p>

<h4>管理方式：</h4>

<p>对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆
来说，释放工作由程序员控制，容易产生memory leak。</p>

<h4>空间大小：</h4>

<p>一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角
度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间
大小的</p>

<h4>碎片问题：</h4>

<p>对于堆来讲，频繁的new/delete势必会造成内存空间的不连续， 对于栈来讲，遵循先进后出的规则，是一块连续的内存空间。堆用链表来存储空闲空间，是不连续的。</p>

<h4>生长方向：</h4>

<p>对于堆来讲，是向高地址拓展的数据结构；对于栈来讲，是向低地址拓展的数据结构。</p>

<h4>分配方式：</h4>

<p>堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配 由alloca，new函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由
编译器进行释放，无需我们手工实现。</p>

<h4>分配效率：</h4>

<p>栈是机器系统提供的数据结构,堆则是C/C++函数库提供的，堆的效率比栈要低得多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java并行编程(1)]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/11/javabing-xing-bian-cheng-1/"/>
    <updated>2017-06-11T21:15:14+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/11/javabing-xing-bian-cheng-1</id>
    <content type="html"><![CDATA[<h1>Java并行编程（1）实现多线程的方法</h1>

<h3>简单基础知识：</h3>

<p>java的并发编程一定要考虑四个方面的内容。</p>

<blockquote><ol>
<li><p>共享性：当多个线程共享一份数据的时候就会有数据的安全问题。</p></li>
<li><p>互斥性：最基本的就是需要保证数据在同一时间只被一个线程锁修改。</p></li>
<li><p>原子性：类似于数据库的一致性，在数据修改到一半的时候，又被其他的操作修改。</p></li>
<li><p>可见性：比如线程1对数据进行了修改，但是还没有同步到最终版本，因此线程2对这次就该就是不可见的，会出现问题。</p></li>
<li><p>有序性:编译器会对代码做重排序的操作，这种排序有可能遵照原始线程的代码顺序，也可能是无序的优化，会有线程不安全的问题。</p></li>
</ol>
</blockquote>

<!--more-->


<p>java中主要有以下几种实现多线程的方法：</p>

<ol>
<li>继承Thread类</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Mytest extends Thread{
</span><span class='line'>    private int num = 8;
</span><span class='line'>    public void run(){
</span><span class='line'>        for (int i=0;i&lt;4;i++)
</span><span class='line'>        {
</span><span class='line'>            if(num &gt; 0){
</span><span class='line'>                System.out.print(num);num--;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>public class javatest {
</span><span class='line'>
</span><span class='line'>    public static void main(String args[]) {
</span><span class='line'>        new Mytest().start();
</span><span class='line'>        new Mytest().start();
</span><span class='line'>        new Mytest().start();
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>输出的是：876587658765
这里new了三个Thread对象，每个对象是互不干扰的，因此相当于做了三遍操作。</p>

<ol>
<li>实现Runnable接口</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Mytest  implements Runnable{
</span><span class='line'>    private int num = 8;
</span><span class='line'>    public void run(){
</span><span class='line'>        for (int i=0;i&lt;10;i++)
</span><span class='line'>        {
</span><span class='line'>            if(num &gt; 0){
</span><span class='line'>               System.out.print(num);num--;            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>public class javatest {
</span><span class='line'>
</span><span class='line'>    public static void main(String args[]) {
</span><span class='line'>        Mytest test=new Mytest();
</span><span class='line'>        new Thread(test).start();
</span><span class='line'>        new Thread(test).start();
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>输出的是：87654321
这里同样new了两个Thread，但是它们操作的是一个Runnable对象，虽然这里顺序是对的，但是是有可能出现86754312的情况的。这里就需要用到下一节讲到的同步方法：synchronized</p>

<ol>
<li>匿名的多线程方法：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lass Mytest  {
</span><span class='line'>    private int num = 8;
</span><span class='line'>    public void method(){
</span><span class='line'>        for (int i=0;i&lt;4;i++)
</span><span class='line'>        {
</span><span class='line'>            if(num &gt; 0){
</span><span class='line'>                System.out.print(num);num--;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>public class javatest {
</span><span class='line'>
</span><span class='line'>    public static void main(String args[]) {
</span><span class='line'>        Mytest test =new Mytest();
</span><span class='line'>        new Thread(new Runnable() {
</span><span class='line'>            public void run() {
</span><span class='line'>                test.method();
</span><span class='line'>            }
</span><span class='line'>        }).start();
</span><span class='line'>        new Thread(new Runnable() {
</span><span class='line'>            public void run() {
</span><span class='line'>                test.method();
</span><span class='line'>            }
</span><span class='line'>        }).start();
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>方法3的作用和方法2是一样的，只不过是匿名的线程，同时也更加灵活，可以让每个线程执行不同的内容。方法3还可以改成lambda的形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void main(String args[]) {
</span><span class='line'>        Mytest test =new Mytest();
</span><span class='line'>        new Thread(() -&gt; {
</span><span class='line'>            test.method();
</span><span class='line'>        }).start();
</span><span class='line'>        new Thread(() -&gt; {
</span><span class='line'>            test.method();
</span><span class='line'>        }).start();
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>参考材料：
<a href="http://www.cnblogs.com/paddix/p/5374810.html">http://www.cnblogs.com/paddix/p/5374810.html</a>
<a href="http://blog.csdn.net/ns_code/article/details/17161237">http://blog.csdn.net/ns_code/article/details/17161237</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式1]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/11/zheng-ze-biao-da-shi-1/"/>
    <updated>2017-06-11T00:10:27+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/11/zheng-ze-biao-da-shi-1</id>
    <content type="html"><![CDATA[<h1>正则表达式</h1>

<h3>1.一般符号</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>. </td>
<td> 匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td>\w </td>
<td> 匹配字母或数字或下划线或汉字 等价于 &lsquo;[^A-Za-z0-9_]&rsquo;</td>
</tr>
<tr>
<td>\s </td>
<td> 匹配空格</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界，比如要匹配I am lily中的am，可以使用\bam\b</td>
</tr>
<tr>
<td>\A</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td>\Z</td>
<td>匹配字符串的结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始，多行时匹配每一行的开头</td>
</tr>
<tr>
<td>$</td>
<td> 匹配字符串的结束，多行时匹配每一行的结束</td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号内的包含的字符，比如[a-z]</td>
</tr>
<tr>
<td>|</td>
<td>匹配左右两边的表达式，优先匹配左边的，如果|不在括号中，作用域就是整个正则表达式。</td>
</tr>
</tbody>
</table>


<!--more-->


<h3>2.反义</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>\W </td>
<td>  匹配任意不是字母，数字，下划线 的字符</td>
</tr>
<tr>
<td>\S</td>
<td>   匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>\D</td>
<td>  匹配任意非数字的字符</td>
</tr>
<tr>
<td>\B</td>
<td>  匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td>[^abc]</td>
<td>  匹配除了abc以外的任意字符</td>
</tr>
</tbody>
</table>


<h3>3.数量相关</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>* </td>
<td> 匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 &ldquo;z&rdquo; 以及 &ldquo;zoo"。</em> 等价于{0,}。</td>
</tr>
<tr>
<td>+ </td>
<td> 匹配前面的子表达式一次或多次。例如，'zo+&lsquo; 能匹配 &ldquo;zo&rdquo; 以及 &ldquo;zoo"，但不能匹配 "z"。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>? </td>
<td>    匹配前面的子表达式零次或一次。例如，"do(es)?&ldquo; 可以匹配 "do&rdquo; 或 &ldquo;does&rdquo; 中的"do" 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>{n} </td>
<td>   n 是一个非负整数。匹配确定的 n 次。例如，'o{2}&lsquo; 不能匹配 &ldquo;Bob&rdquo; 中的 'o'，但是能匹配 &ldquo;food&rdquo; 中的两个 o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>   n 是一个非负整数。至少匹配n 次。例如，'o{2,}&lsquo; 不能匹配 &ldquo;Bob&rdquo; 中的 'o'，但能匹配 &ldquo;foooood&rdquo; 中的所有 o。'o{1,}&rsquo; 等价于 &lsquo;o+'。'o{0,}&rsquo; 则等价于 &lsquo;o*'。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>  m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}&ldquo; 将匹配 "fooooood&rdquo; 中的前三个 o。'o{0,1}&lsquo; 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>*?</td>
<td>   匹配任意次，但尽可能少重复</td>
</tr>
<tr>
<td>+?</td>
<td>  重复1次或更多次，但尽可能少重复</td>
</tr>
<tr>
<td>??</td>
<td>  重复0次或1次，但尽可能少重复</td>
</tr>
<tr>
<td>{n,m}?</td>
<td>  重复n到m次，但尽可能少重复</td>
</tr>
<tr>
<td>{n,}?</td>
<td>   重复n次以上，但尽可能少重复</td>
</tr>
</tbody>
</table>


<h3>4. （）作为分组</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>（）</td>
<td>表示一个分组，每个分组都有一个编号，从1开始递增，分组的后面可以接表示数量的符号。</td>
</tr>
<tr>
<td>（?P<name>）</td>
<td>表示为这个分组增加一个别名</td>
</tr>
<tr>
<td>\数字</td>
<td>“\”后面接一个数字，该数字就是分组的编号，用来引用一个前面的分组</td>
</tr>
<tr>
<td>(?P=name)</td>
<td>name指的是分组的别名，用来用来引用一个前面的分组</td>
</tr>
</tbody>
</table>


<h3>5. （）作为分组不作为分组</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>(?:)</td>
<td>不分组，不分配分组编号</td>
</tr>
<tr>
<td>(?=)</td>
<td>匹配前面的字符的后面必须跟这该括号内的表达式。比如a(?=\d)则匹配后面接着数字的a。</td>
</tr>
<tr>
<td>(?!)</td>
<td>匹配前面的字符的后面不是跟这该括号内的表达式。比如a(?!\d)则匹配后面不是接着数字的a。</td>
</tr>
<tr>
<td>(?&lt;=)</td>
<td>比如a(?&lt;=\d)则匹配前面接着数字的a。</td>
</tr>
<tr>
<td>(?&lt;!)</td>
<td>比如a(?&lt;!\d)则匹配前面不是接着数字的a。</td>
</tr>
<tr>
<td>(?#)</td>
<td>#号后面的内容是注释</td>
</tr>
<tr>
<td>(?(id/name)par1|par2) </td>
<td> 就是如果该编号或者名字的分组匹配到了，那么久匹配par1，如果没有就匹配par2。</td>
</tr>
</tbody>
</table>


<p>实例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var str = "https://www.runoob.com:80/html/html-tutorial.html";
</span><span class='line'>var patt1 = /(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javaNote]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/10/javanote/"/>
    <updated>2017-06-10T22:17:52+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/10/javanote</id>
    <content type="html"><![CDATA[<h1>java中的容器</h1>

<blockquote><p>List</p>

<blockquote><p><a href="#1.1">ArrayList</a></p>

<p><a href="#1.2">linkedList</a></p></blockquote>

<p>Map</p>

<blockquote><p><a href="#2.1">HashTable</a></p>

<p><a href="#2.2">HashMap</a></p>

<p><a href="#2.3">LinkedHashMap</a></p>

<p><a href="#2.4">Treemap</a></p>

<p><a href="#2.5">WeekHashMap</a></p>

<p><a href="#2.6">ConcurrentHashMap</a></p>

<p><a href="#2.7">IdentityHashMap</a></p></blockquote>

<p>Set</p>

<blockquote><p><a href="#3.1">HashSet</a></p>

<p><a href="#3.2">LinkedHashSet</a></p>

<p><a href="#3.3">TreeSet</a></p></blockquote>

<p><a href="#4.1">Queue</a></p>

<p><a href="#4.2">Deque</a></p></blockquote>

<!--more-->


<h3 id="1.1">1.1 ArrayList</h3>


<p>ArrayList实现了可变大小的数组,相当于动态数组,存储在连续的地址空间。它允许所有元素，包括null。ArrayList没有同步。</p>

<blockquote><p>ArrayList 实现了RandmoAccess接口，即提供了随机访问功能。</p>

<p>ArrayList 函数clone()，能被克隆。</p>

<p>ArrayList 实现java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输。</p>

<p>ArrayList中的操作不是线程安全的！所以，建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。</p></blockquote>

<p>现在基本上不怎么用vector了，大部分的性质和ArrayList一样，但是vector是线程安全的。</p>

<h4>方法：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Collection中定义的API
</span><span class='line'>boolean             add(E object)
</span><span class='line'>boolean             addAll(Collection&lt;? extends E&gt; collection)
</span><span class='line'>void                clear()
</span><span class='line'>boolean             contains(Object object)
</span><span class='line'>boolean             containsAll(Collection&lt;?&gt; collection)
</span><span class='line'>boolean             equals(Object object)
</span><span class='line'>int                 hashCode()
</span><span class='line'>boolean             isEmpty()
</span><span class='line'>Iterator&lt;E&gt;         iterator()
</span><span class='line'>boolean             remove(Object object)
</span><span class='line'>boolean             removeAll(Collection&lt;?&gt; collection)
</span><span class='line'>boolean             retainAll(Collection&lt;?&gt; collection)
</span><span class='line'>int                 size()
</span><span class='line'>&lt;T&gt; T[]             toArray(T[] array)
</span><span class='line'>Object[]            toArray()
</span><span class='line'>// AbstractCollection中定义的API
</span><span class='line'>void                add(int location, E object)
</span><span class='line'>boolean             addAll(int location, Collection&lt;? extends E&gt; collection)
</span><span class='line'>E                   get(int location)
</span><span class='line'>int                 indexOf(Object object)
</span><span class='line'>int                 lastIndexOf(Object object)
</span><span class='line'>ListIterator&lt;E&gt;     listIterator(int location)
</span><span class='line'>ListIterator&lt;E&gt;     listIterator()
</span><span class='line'>E                   remove(int location)
</span><span class='line'>E                   set(int location, E object)
</span><span class='line'>List&lt;E&gt;             subList(int start, int end)
</span><span class='line'>// ArrayList新增的API
</span><span class='line'>Object               clone()
</span><span class='line'>void                 ensureCapacity(int minimumCapacity)
</span><span class='line'>void                 trimToSize()
</span><span class='line'>void                 removeRange(int fromIndex, int toIndex)</span></code></pre></td></tr></table></div></figure>


<blockquote><p>每个ArrayList实例都有一个容量（Capacity），即用于存储元素的数组的大小。这个容量可随着不断添加新元素而自动增加，但是增长算法并没有定义。当需要插入大量元素时，在插入前可以调用ensureCapacity方法来增加ArrayList的容量以提高插入效率。</p></blockquote>

<h3>特性</h3>

<p>(1) ArrayList 通过一个数组去保存数据的。当我们构造ArrayList时，若使用默认构造函数，设置默认的大小，当容量不足时再设置新的容量。</p>

<p>(2) java.io.Serializable的方式。当写入到输出流时，先写入“容量”，再依次写入“每一个元素”；当读出输入流时，先读取“容量”，再依次读取“每一个元素”。</p>

<h3>遍历方式</h3>

<blockquote><p>（1）Iterater
（2）随机访问，get(i)
（3）循环 for(m:list)</p></blockquote>

<h3 id="1.2">1.2 linkedList </h3>


<p>linkedList是双向循环链表，继承AbstractSequentialList 抽象类，实现了List，Deque，Cloneable，Serializable 几个接口。</p>

<h4>方法：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>boolean             add(E object)
</span><span class='line'>void                add(int location, E object)
</span><span class='line'>public void addFirst(E e)   VS   public boolean offerFirst(E e)
</span><span class='line'>public void addLast(E e)   VS  public boolean offerLast(E e)
</span><span class='line'>public void clear()
</span><span class='line'>public boolean contains(Object o)
</span><span class='line'>public int indexOf(Object o)
</span><span class='line'>public E element()等于public E getFirst()
</span><span class='line'>public E get(int index)  
</span><span class='line'>public E set(int index, E element)
</span><span class='line'>public E getLast()
</span><span class='line'>public int lastIndexOf(Object o)
</span><span class='line'>public boolean offer(E e)
</span><span class='line'>public E peek()  VS getfirst()  VS  peekFirst()
</span><span class='line'>public E peekLast()  VS getlast()
</span><span class='line'>public E poll() VS pollFirst()  VS  removeFirst()
</span><span class='line'>public E pollLast()  VS   removeLast()
</span><span class='line'>public E pop() 等于 removeFirst()
</span><span class='line'>public void push(E e)  等于 addFirst()
</span><span class='line'>public E remove() 等于 removeFirst()
</span><span class='line'>public E remove(int index)
</span><span class='line'>public boolean remove(Object o)
</span><span class='line'>public boolean removeFirstOccurrence(Object o)
</span><span class='line'>public boolean removeLastOccurrence(Object o)
</span><span class='line'>
</span><span class='line'>public Object clone()
</span><span class='line'>public Object[] toArray()
</span></code></pre></td></tr></table></div></figure>


<h4>迭代器</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ListIterator&lt;String&gt; itr = list.listIterator();
</span><span class='line'>          while (itr.hasNext()) {
</span><span class='line'>              System.out.println(itr.next());
</span><span class='line'>          }</span></code></pre></td></tr></table></div></figure>


<p>还有一个反向的迭代器叫做DescendingIterator</p>

<h3 id="2.1">2.1 HashTable </h3>


<blockquote><p>（1）hashTable存储的是键值对。</p>

<p>（2）通过单链表解决冲突问题，容量不足时，自动增长。</p>

<p>（3）线程安全的</p>

<p>（4）实现了Serializable,Cloneable接口.</p></blockquote>

<h4>方法：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public synchronized V put(K key, V value)
</span><span class='line'>public synchronized V get(Object key) 
</span><span class='line'>public synchronized V remove(Object key)
</span><span class='line'>\\函数很多省略</span></code></pre></td></tr></table></div></figure>


<p>HashTable的迭代器：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Map&lt;Integer,String&gt; m=new HashMap&lt;&gt;();
</span><span class='line'>    m.put(3, "Value3");
</span><span class='line'>    for(Iterator t=m.keySet().iterator();t.hasNext();){
</span><span class='line'>        String   key   =   (String)   t.next();
</span><span class='line'>        Object   value   =   m.get(key);
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>




<h3 id="2.2">2.2 HashMap </h3>


<ol>
<li>HashMap默认的initialCapacity为16，loadFactor为0.75：</li>
</ol>


<blockquote><p>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。</p>

<p>HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。</p>

<p>HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</p></blockquote>

<ol>
<li><p>HashMap允许存放null键和null值。key值只允许有一个null，value则可以允许有多个null。当key为null时，键值对永远都放在以table[0]为头结点的链表中。</p></li>
<li><p>每次根据hashCode()计算键值对存放的位置，还会用equals判断key是否一样，如果一样的化，新的值将会覆盖旧的值，如果不一样的话，新的键值对会插入到相应位置的头部。</p></li>
<li><p>是动态的链表，会根据threshold扩容，当数据量超过threshold就会扩容，容量增大一倍。</p></li>
<li><p>hashMap不是线程安全的</p></li>
<li>因为包含空值，所以不能通过get函数的返回值来判断是非包含某个key或者value，应该使用containKey或者是containValue.</li>
<li>clear()方法，清空Map</li>
</ol>


<h3 id="2.3">2.3 LinkedHashMap </h3>


<p>LinkedHashMap是HashMap的子类，LinkedHashMap维护一个双向链表来保存插入数据或者访问数据的顺序，HashMap遍历的时候，顺序是未知的。同样可以有null的key和value。也不是线程安全的。</p>

<h3>注意</h3>

<p>LinkedHashMap默认根据插入的顺序来维护这个双向链表，但是它也支持访问的顺序。网上看到一个例子：</p>

<p><strong>例子</strong>
如果你想构造一个LinkedHashMap，并打算按从近期访问最少到近期访问最多的顺序（即访问顺序）来保存元素，那么请使用下面的构造方法构造LinkedHashMap：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public LinkedHashMap(int initialCapacity,  
</span><span class='line'>         float loadFactor,  
</span><span class='line'>                     boolean accessOrder) {  
</span><span class='line'>    super(initialCapacity, loadFactor);  
</span><span class='line'>    this.accessOrder = accessOrder;  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>LinkedHashMap提供了removeEldestEntry(Map.Entry&lt;K,V> eldest)方法。该方法可以提供在每次添加新条目时移除最旧条目的实现程序，默认返回false，这样，此映射的行为将类似于正常映射，即永远不能移除最旧的元素。</p>

<p>重写此方法，维持此映射只保存100个条目的稳定状态，在每次添加新条目时删除最旧的条目。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private static final int MAX_ENTRIES = 100;  
</span><span class='line'>protected boolean removeEldestEntry(Map.Entry eldest) {  
</span><span class='line'>    return size() &gt; MAX_ENTRIES;  
</span><span class='line'>}  </span></code></pre></td></tr></table></div></figure>




<h3 id="2.4">2.4 Treemap </h3>


<p>Treemap实际上就是用红黑树实现的Map。红黑树的原理可以参考：</p>

<p>Treemap中的插入删除等操作都是遵循红黑树的插入删除算法。</p>

<h3 id="2.5">2.5 WeakHashMap </h3>


<p>WeakHashMap的键是“弱键”。也就是说weakHashMap的键没有其他地方的引用的时候，就会被回收。WeakHashMap中所有的值都是保存在一个table中的，当某“弱键”不再被其它对象引用，会被回收，这个“弱键”会被添加到ReferenceQueue(queue)队列中，下一次同步这个table和队列就可以了。</p>

<h3 id="2.6">2.6 ConcurrentHashMap </h3>


<p>实际上HashMap是线程不安全的，因此在多线程的情况下使用hashMap的put操作时，会引发死循环。而HashTable因为锁机制使得它效率比较低，不允许同时进行put操作。ConcurrentHashMap就是介于这两者之间，采用分段锁机制，使其可以被并行使用。把数据分成多段，给每一段数据都分配一把锁，同一段数据内部不允许同时操作，不同段的数据可以同时操作，因此提高了它的效率。</p>

<h3 id="2.7">2.7 IdentityHashMap </h3>


<p>IdentityHashMap会允许Key值重复。个人理解是IdentityHashMap认为key和value都相等的话，才认为是重复的，不然不认为是重复的。</p>

<h3 id="3.1">3.1 HashSet </h3>


<p>HashSet是基于HashMap实现的，底层采用HashMap来存储元素。也就是说HashSet中的元素都是存在HashMap的Key中的。</p>

<h4>注意：</h4>

<p>HashSet 中判断两个对象相等需要满足两个要求：</p>

<p>（1）通过 equals() 方法判断比较返回 true</p>

<p>（2）两个对象的 hashCode() 返回值相等</p>

<p>所以当使用某个类的对象作为key值存入hashMap中时，需要注意重写equals()方法和hashCode() 方法。</p>

<h3 id="3.2">3.2 LinkedHashSet </h3>


<p>LinkedHashSet以元素插入的顺序来维护集合的链接表，允许以插入的顺序在集合中迭代。其实LinkedHashSet是对LinkedHashMap的简单包装。</p>

<h3 id="3.3">3.3 TreeSet </h3>


<blockquote><ul>
<li><p>提供一个使用树结构存储Set接口的实现，对象以升序顺序存储，访问和遍历的时间很快。</p></li>
<li><p>TreeSet中的元素支持2种排序方式：</p>

<blockquote><p>自然排序
根据Comparator 进行排序。</p></blockquote></li>
<li><p>TreeSet是非同步的。</p></li>
<li><p>TreeSet不支持快速随机遍历，只能通过迭代器进行遍历。有Iterator和descendingIterator。</p></li>
</ul>
</blockquote>

<h3 id="4.1"> Queue </h3>


<p>在java里面，Queue是借口，有很多种实现，以下是实现了Queue的一些类。AbstractQueue, ArrayBlockingQueue, ConcurrentLinkedQueue, LinkedBlockingQueue, DelayQueue, LinkedList, PriorityBlockingQueue, PriorityQueue和ArrayDqueue。</p>

<p>其中用的最多的是linkedList实现的。</p>

<h4>方法：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>boolean add(E e);  
</span><span class='line'>boolean add(E e);  
</span><span class='line'>boolean offer(E e);  
</span><span class='line'>void addFirst(E e);    
</span><span class='line'>void addLast(E e);    
</span><span class='line'>boolean offerFirst(E e);    
</span><span class='line'>boolean offerLast(E e);
</span><span class='line'>E removeFirst();    
</span><span class='line'>E removeLast();    
</span><span class='line'>E pollFirst();    
</span><span class='line'>E pollLast();    
</span><span class='line'>E remove();    
</span><span class='line'>E poll(); 
</span><span class='line'>E getFirst();   
</span><span class='line'>E getLast();    
</span><span class='line'>E peekFirst();    
</span><span class='line'>E peekLast();    
</span><span class='line'>E element();    
</span><span class='line'>E peek(); 
</span></code></pre></td></tr></table></div></figure>


<p>PriorityQueue:</p>

<h3 id="4.2">Deque </h3>


<p>Deque是双向队列，继承自queue。区别在于Deque可以实现stack的功能，也就是先进后出的功能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface Deque&lt;E&gt; extends Queue&lt;E&gt; {//继承自Queue接口并进行扩展，支持双端操作  
</span><span class='line'>    void addFirst(E e);//将指定元素插入此双端队列的开头。如果此队列有容量限制且当前没有可用空间，则抛出异常  
</span><span class='line'>    void addLast(E e);//将指定元素插入此双端队列的末尾。如果此队列有容量限制且当前没有可用空间，则抛出异常  
</span><span class='line'>    boolean offerFirst(E e);//将指定的元素插入此双端队列的开头。如果此队列有容量限制且当前没有可用空间，false  
</span><span class='line'>    boolean offerLast(E e);//将指定的元素插入此双端队列的末尾。如果此队列有容量限制且当前没有可用空间，false  
</span><span class='line'>    E removeFirst();//获取并移除此双端队列第一个元素;如果此队列为空，则抛出异常。  
</span><span class='line'>    E removeLast();//获取并移除此双端队列最后一个元素;如果此队列为空，则抛出异常。  
</span><span class='line'>    E pollFirst();//获取并移除此双端队列第一个元素;如果此队列为空，则返回 null。  
</span><span class='line'>    E pollLast();//获取并移除此双端队列最后一个元素;如果此队列为空，则返回 null。  
</span><span class='line'>    E getFirst();//获取但不移除此队列的头；如果此队列为空，则抛出异常。  
</span><span class='line'>    E getLast();//获取但不移除此双端队列最后一个元素；如果此队列为空，则抛出异常  
</span><span class='line'>    E peekFirst();//获取但不移除此队列的头；如果此队列为空，则返回 null。  
</span><span class='line'>    E peekLast();//获取但不移除此队列的头；如果此队列为空，则返回 null。  
</span><span class='line'>    boolean removeFirstOccurrence(Object o);//从此双端队列移除第一次出现的指定元素。如果此双端队列不包含该元素，则不作更改  
</span><span class='line'>    boolean removeLastOccurrence(Object o);//从此双端队列移除最后一次出现的指定元素。如果此双端队列不包含该元素，则不作更改  
</span><span class='line'>    boolean add(E e);//等效于addLast  
</span><span class='line'>    boolean offer(E e);//等效于offerLast  
</span><span class='line'>    E remove();//等效于 removeFirst()。   
</span><span class='line'>    E poll();//此方法等效于 pollFirst()。   
</span><span class='line'>    E element();//此方法等效于 getFirst()。  
</span><span class='line'>    E peek();//此方法等效于 peekFirst()。  
</span><span class='line'>    void push(E e);//此方法等效于 addFirst(E)。  
</span><span class='line'>    E pop();//此方法等效于 removeFirst()。  
</span><span class='line'>    boolean remove(Object o);//此方法等效于 removeFirstOccurrence(java.lang.Object)。  
</span><span class='line'>    boolean contains(Object o);//如果此双端队列包含指定元素，则返回 true  
</span><span class='line'>    public int size();//返回此双端队列的元素数。  
</span><span class='line'>    Iterator&lt;E&gt; iterator();//返回以恰当顺序在此双端队列的元素上进行迭代的迭代器  
</span><span class='line'>    Iterator&lt;E&gt; descendingIterator();//返回以逆向顺序在此双端队列的元素上进行迭代的迭代器  
</span><span class='line'>  
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>参考链接：</p>

<p><a href="http://www.cnblogs.com/skywang12345/p/3308556.html">http://www.cnblogs.com/skywang12345/p/3308556.html</a>
<a href="http://blog.csdn.net/hla199106/article/details/46912615">http://blog.csdn.net/hla199106/article/details/46912615</a>
<a href="http://blog.csdn.net/hello_zihan/article/details/52997816">http://blog.csdn.net/hello_zihan/article/details/52997816</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python字符串连接]]></title>
    <link href="http://chenlini.github.io/blog/2017/05/19/pythonzi-fu-chuan-lian-jie/"/>
    <updated>2017-05-19T11:14:50+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/05/19/pythonzi-fu-chuan-lian-jie</id>
    <content type="html"><![CDATA[<h2>python字符串连接</h2>

<p>python有若干种字符连接方式，找找资料总结如下：</p>

<ol>
<li><p>‘+’号方法</p>

<pre><code> str1='aaa'
 str2='bbb'
 print(str1 + str2)
 'aaabbb'
</code></pre></li>
<li><p>‘,’号方法，会有空格。</p>

<pre><code> str1='aaa'
 str2='bbb'
 print(str1 , str2)
 'aaa bbb'
</code></pre></li>
<li><p>空格连接</p>

<pre><code> str1='aaa'
 str2='bbb'
 print(str1 str2)
 'aaabbb'
</code></pre></li>
<li><p>‘%’连接</p>

<pre><code> str1='aaa'
 str2='bbb'
 print("%s,%s"%(str1,str2))
 'aaa,bbb'
</code></pre></li>
<li><p>join</p>

<pre><code> str=['aaa','bbb','ccc']
 t=','
 print(t.join(str))
 'aaa,bbb,ccc'
</code></pre></li>
<li><p>&lsquo;*'连接</p>

<pre><code> a = 'abc'
 a * 3 = 'abcabcabc'
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汉诺塔]]></title>
    <link href="http://chenlini.github.io/blog/2017/05/16/yi-nuo-ta/"/>
    <updated>2017-05-16T10:59:25+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/05/16/yi-nuo-ta</id>
    <content type="html"><![CDATA[<h2>汉诺塔问题</h2>

<p>递归问题
n个盘子，三个柱子。一个柱子为起始柱子，一个为终点柱子，一个为中间柱子。
步骤：</p>

<p>1.将n-1个盘子移到中间柱子。</p>

<p>2.将第n个盘子移到终点柱子。</p>

<p>问题就变成了将n-1个盘子移到终点柱子的问题，重复。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    #include&lt;iostream&gt;
</span><span class='line'>    using namespace std;
</span><span class='line'>    int i;
</span><span class='line'>    void move(int n,char from,char to){
</span><span class='line'>           printf("step %d: the number %d from %c to %c ",i++,n,from,to);
</span><span class='line'>    }
</span><span class='line'>    void Hanio(int n,char start,char end,char mid){
</span><span class='line'>           if(n==1)move(n,start,end);
</span><span class='line'>           else{
</span><span class='line'>                Hanio(n-1,start,mid,end);
</span><span class='line'>                move(n,start,end);
</span><span class='line'>                Hanio(n-1,mid,end,start);
</span><span class='line'>               }
</span><span class='line'>    }
</span><span class='line'>    int main(){
</span><span class='line'>           int n;  
</span><span class='line'>        while(cin&lt;&lt;n){  
</span><span class='line'>        i = 1;   //全局变量赋初始值  
</span><span class='line'>        Hanio(n,'1','2','3');  
</span><span class='line'>        printf("最后总的步数为%d\n",i-1);  
</span><span class='line'>     }  
</span><span class='line'>    return 0; 
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[neo4j(1)]]></title>
    <link href="http://chenlini.github.io/blog/2017/05/14/neo4j-1/"/>
    <updated>2017-05-14T23:53:49+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/05/14/neo4j-1</id>
    <content type="html"><![CDATA[<h1>neo4j安装步骤</h1>

<p>注：</p>

<blockquote><ol>
<li>先安装好java</li>
<li>官网上直接通过apt-get不行</li>
</ol>
</blockquote>

<p>需要到<a href="http://neo4j.com/download/">http://neo4j.com/download/</a> 下载对应的版本，解压安装。</p>

<!--more-->


<ol>
<li><p>解压：</p>

<blockquote><p>$ tar –zvxf neo4j-community-3.1.3.-unix.tar.gz</p></blockquote></li>
<li><p>启动neo4j</p>

<blockquote><p>$ ./neo4j console</p></blockquote></li>
<li><p>打开浏览器进入工作环境  <a href="http://localhost/7474">http://localhost/7474</a></p></li>
<li>第一次进入会要求修改用户名和密码，该用户名和密码一定要记住，后面会用到！！！</li>
</ol>


<p>注：最新版的neo4j暂时不需要修改配置文件，如果是以前的版本需要去conf/neo4j-server.properties里面下面这句话前面的注释符删掉。</p>

<pre><code>    #org.neo4j.server.webserver.address=0.0.0.0
</code></pre>

<h1>Python+neo4j 小demo笔记</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from __future__ import print_function
</span><span class='line'>
</span><span class='line'>import sys
</span><span class='line'>
</span><span class='line'>from py2neo import Graph, Node, Relationship
</span><span class='line'>graph = Graph(
</span><span class='line'>    "http://localhost:7474",
</span><span class='line'>    username="xxx",
</span><span class='line'>    password="xxx"
</span><span class='line'>)
</span><span class='line'>#删除所有的点和边
</span><span class='line'>#graph.delete_all()
</span><span class='line'>#定义点
</span><span class='line'>node_1 = Node(label = "Person",name = "node_1")
</span><span class='line'>node_2 = Node(label = "Person",name = "node_2")
</span><span class='line'>node_3 = Node(label = "Person",name = "node_3")
</span><span class='line'>node_4 = Node(label = "Person",name = "node_4")
</span><span class='line'>node_5 = Node(label = "Person",name = "node_5")
</span><span class='line'>node_6 = Node(label = "Person",name = "node_6")
</span><span class='line'>
</span><span class='line'>#创建点
</span><span class='line'>graph.create(node_1)
</span><span class='line'>graph.create(node_2)
</span><span class='line'>graph.create(node_3)
</span><span class='line'>graph.create(node_4)
</span><span class='line'>graph.create(node_5)
</span><span class='line'>graph.create(node_6)
</span><span class='line'>#定义关系
</span><span class='line'>node_1_F_node_2 = Relationship(node_1,'w12',node_2)
</span><span class='line'>node_1_F_node_3 = Relationship(node_1,'w13',node_3)
</span><span class='line'>node_1_F_node_4 = Relationship(node_1,'w14',node_4)
</span><span class='line'>node_2_F_node_1 = Relationship(node_2,'w21',node_1)
</span><span class='line'>node_2_F_node_3 = Relationship(node_2,'w23',node_3)
</span><span class='line'>node_2_F_node_4 = Relationship(node_2,'w24',node_4)
</span><span class='line'>
</span><span class='line'>node_3_F_node_1 = Relationship(node_3,'w31',node_1)
</span><span class='line'>node_3_F_node_2 = Relationship(node_3,'w32',node_2)
</span><span class='line'>node_3_F_node_4 = Relationship(node_3,'w34',node_4)
</span><span class='line'>
</span><span class='line'>node_4_F_node_1 = Relationship(node_4,'w41',node_1)
</span><span class='line'>node_4_F_node_2 = Relationship(node_4,'w42',node_2)
</span><span class='line'>node_4_F_node_3 = Relationship(node_4,'w43',node_3)
</span><span class='line'>
</span><span class='line'>node_5_F_node_4 = Relationship(node_5,'w54',node_4)
</span><span class='line'>node_4_F_node_5 = Relationship(node_4,'w45',node_5)
</span><span class='line'>node_5_F_node_6 = Relationship(node_5,'w56',node_6)
</span><span class='line'>node_6_F_node_5 = Relationship(node_6,'w65',node_5)
</span><span class='line'>
</span><span class='line'>#为关系设定权重
</span><span class='line'>node_1_F_node_2['weight'] = 1
</span><span class='line'>node_1_F_node_2['weight'] = 2
</span><span class='line'>node_1_F_node_3['weight'] = 1
</span><span class='line'>node_2_F_node_1['weight'] = 2
</span><span class='line'>node_2_F_node_3['weight'] = 1
</span><span class='line'>node_2_F_node_4['weight'] = 2
</span><span class='line'>node_3_F_node_1['weight'] = 1
</span><span class='line'>node_3_F_node_2['weight'] = 2
</span><span class='line'>node_3_F_node_4['weight'] = 1
</span><span class='line'>node_4_F_node_1['weight'] = 2
</span><span class='line'>node_4_F_node_2['weight'] = 1
</span><span class='line'>node_4_F_node_3['weight'] = 2
</span><span class='line'>
</span><span class='line'>node_5_F_node_4['weight'] = 2
</span><span class='line'>node_4_F_node_5['weight'] = 1
</span><span class='line'>node_5_F_node_6['weight'] = 2
</span><span class='line'>node_6_F_node_5['weight'] = 2
</span><span class='line'>#创建关系
</span><span class='line'>graph.create(node_1_F_node_2)
</span><span class='line'>graph.create(node_1_F_node_2)
</span><span class='line'>graph.create(node_1_F_node_3)
</span><span class='line'>graph.create(node_2_F_node_1)
</span><span class='line'>graph.create(node_2_F_node_3)
</span><span class='line'>graph.create(node_2_F_node_4)
</span><span class='line'>graph.create(node_3_F_node_1)
</span><span class='line'>graph.create(node_3_F_node_2)
</span><span class='line'>graph.create(node_3_F_node_4)
</span><span class='line'>graph.create(node_4_F_node_1)
</span><span class='line'>graph.create(node_4_F_node_2)
</span><span class='line'>graph.create(node_4_F_node_3)
</span><span class='line'>
</span><span class='line'>graph.create(node_4_F_node_5)
</span><span class='line'>graph.create(node_5_F_node_4)
</span><span class='line'>graph.create(node_5_F_node_6)
</span><span class='line'>graph.create(node_6_F_node_5)
</span><span class='line'>#更新
</span><span class='line'>node_1_F_node_2['count'] += 1
</span><span class='line'>node_1['name'] = "peter"
</span><span class='line'>graph.push(node_1_F_node_2)
</span><span class='line'>graph.push(node_1)
</span><span class='line'>#查询语句
</span><span class='line'>## find_one返回一个
</span><span class='line'>find_1 = graph.find_one(
</span><span class='line'>  label="Person",
</span><span class='line'>  property_key="name",
</span><span class='line'>  property_value="node_1"
</span><span class='line'>)
</span><span class='line'>#find返回的是游标
</span><span class='line'>findA = graph.find(
</span><span class='line'>    lable="Person"
</span><span class='line'>)
</span><span class='line'>for it in findA:
</span><span class='line'>    print(it['name'])
</span><span class='line'>#查找关系用mactch和macth_one,用法与上面相似，注意start_node和end_node至少有一个
</span><span class='line'># bidirectional指的是否可以是双向的，true表示不考虑方向，false表示必须是start指向end的边
</span><span class='line'>#start_node后面可以是单个的node也可以是查询出来的一系列node.
</span><span class='line'>relationship = graph.match_one(start_node=node_1, end_node=node_2, bidirectional=False)
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://raw.githubusercontent.com/chenlini/chenlini.github.io/source/source/images/neo4j.png" alt="" /></p>

<h2>注意问题</h2>

<ol>
<li>在代码测试阶段最好能够及时清理数据库，直接去图形化界面清理即可。用delete语句清理。不然没调试一次都会有数据插入neo4j。</li>
<li>注意建立节点或者是关系之前，都去判断一下该节点或关系是否已经存在，避免出现重复的节点和关系。</li>
</ol>


<h2>利用Neo4j-shell批量导入数据</h2>

<p>新建一个文件 demo.cql</p>

<p>按照以下步骤：</p>

<h3>Neo4j利用load_csv批量导入数据</h3>

<p>注意，neo4j需要导入数据必须是结构化的node和edge。每一种点放在一个表中，每一种关系放在一个表中。</p>

<ol>
<li><p>把csv文件放在安装目录的import文件夹下面。</p></li>
<li><p>在demo.cql中写入Neo4j的语句：</p></li>
</ol>


<p>创造node：</p>

<pre><code>    load csv with headers from "file:///family10000.csv" as row
    create (:Family{familyNum:row.familyno})

    load csv with headers from "file:///user10000.csv" as row
    create (:User{crt_id:row.crt_id})
</code></pre>

<p>为点创造索引：</p>

<pre><code>    create index on :User(crt_id)   
</code></pre>

<p>创造边：</p>

<pre><code>    using periodic commit
    load csv with headers from "file:///family_relation10000.csv" as row
    match(user:User{crt_id:row.crt_id})
    match(family:Family{familyNum:row.familyno})
    merge(family)-[:include]-&gt;(user);
</code></pre>

<ol>
<li><p>在bin目录下执行</p>

<pre><code> ./neo4j-shell -file demo.cql &gt; result.txt
</code></pre></li>
</ol>


<p>有结果就会写到result.txt里面，没有反回就不会写</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby升级]]></title>
    <link href="http://chenlini.github.io/blog/2017/05/14/rubysheng-ji/"/>
    <updated>2017-05-14T23:21:38+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/05/14/rubysheng-ji</id>
    <content type="html"><![CDATA[<h2>Mac升级系统后需要更新ruby</h2>

<p>前段时间学学怎么用octopress写博客，更新了mac版本后就发现不能rake preview了，网上查了一下发现需要更新ruby，中间遇到了一些问题，记录如下：</p>

<p>之前没有通过rvm安装ruby，要更新比较麻烦，因此现在从新安装rvm.</p>

<pre><code>#安装rvm
curl -L https://get.rvm.io | bash -s stable
source ~/.bashrc
source ~/.bash_profile
#查看已知ruby版本
rvm list know
#安装版本
rvm install 2.3.3
</code></pre>

<p>注意：在install的时候可能会出现错误，错误原因是brew需要update，因此需要执行以下语句</p>

<pre><code>brew update
</code></pre>

<p>如果brew update 出现错误，"The /usr/local directory is not writable.&ldquo; 需要去到/usr/local/目录下面执行：</p>

<pre><code>sudo chown -R $(whoami) /usr/local
brew prune
</code></pre>

<p>这样就可以brew update了。</p>

<p>完成ruby的更新之后，发现还是不能rake preview,还是会报错！发现需要重新安装bundler</p>

<pre><code>gem install bundler
</code></pre>

<p>但是重新安装完了之后又又问题了，rake不见了！只能再走一遍。</p>

<pre><code>bundle install
</code></pre>

<h5>补充rvm的命令</h5>

<pre><code>rvm use 2.3.3
#卸载
rvm remote 2.3.3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hive_note]]></title>
    <link href="http://chenlini.github.io/blog/2017/05/13/hive-note/"/>
    <updated>2017-05-13T00:35:27+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/05/13/hive-note</id>
    <content type="html"><![CDATA[<h2>Hive 语句简单优化</h2>

<p>使用Hive的过程中，因为数据倾斜的问题可能会造成效率十分地下，以下记录一些hive的简单语句的优化操作。大部分都来自网络，查资料的时候看到就顺便记录一下。</p>

<!--more-->


<h3>1. 设置</h3>

<pre><code>set Hive.groupby.skewindata=true;
#解决jion造成的倾斜
set Hive.optimize.skewjoin = true;
</code></pre>

<h3>2. 简单统计语句</h3>

<pre><code>#优化前：
select count(distinct id) from table A;
#优化后
select count(*) from (select distinct id from tableA)t;
</code></pre>

<h3>3. 列转行</h3>

<pre><code>#建表
create table A(
colume1 string,
colume2s array&lt;string&gt;
)ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' ; 
COLLECTION ITEMS TERMINATED BY ',' ;
#插入数据，B是原始表格，按照colume1插入数据
insert  overwrite  table  A  
select max(B.colume1),  collect_set(B.colume2)  as  colume2s from B group by B.colume1;

方法2:
create table A as select max(B.colume1),concat_ws(',',collect_set(B.colume2)) as colume2s from B group by B.colume1;
</code></pre>

<h3>4. 多列的distinct</h3>

<pre><code>#优化前 
select t1， count(distinct t2) as t3 from A group by t1;  
#优化后 
select t1， count(*) as t3  
from (select distinct t1， t2 from A) group by t1; 
</code></pre>

<h3>5. 查询的时候还可以通过并行来进行优化</h3>

<pre><code>set Hive.exec.parallel=true;
#默认是8
set Hive.exec.parallel. thread.number=n;
select * from   
(  
select count(t1) from A   
where y = 2017 and m = 1  
union all   
select count(t1) from A   
where y = 2017 and m = 2  
union all   
select count(t1) from A   
where y = 2017 and m = 3  
)t 
</code></pre>

<h3>6. 减少Job数量</h3>

<p>优化实现思路，减少job的数量。
举例，统计购买既物品A又购买物品B的用户的数量。
优化前：</p>

<pre><code>select count(*) 
from
(select distinct user 
from T1 where item = ‘A’) A
join 
(select distinct user 
from T1 where item = ‘B’) B 
on A.user = B.user;
</code></pre>

<p>优化后：</p>

<pre><code>select count(*) 
from T1 group by user
having (count(case when item = ‘A’ then 1 end) &gt; 0
and count(case when item = ‘B’ then 1 end) &gt; 0) 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python_algorithm]]></title>
    <link href="http://chenlini.github.io/blog/2017/04/18/python-algorithm/"/>
    <updated>2017-04-18T13:21:33+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/04/18/python-algorithm</id>
    <content type="html"><![CDATA[<h1>Python 常用的机器学习算法库介绍</h1>

<hr />

<p>Python作为目前最火的学习机器学习算法的语言之一拥有如下三个优点：</p>

<blockquote><ol>
<li>语法简单，上手容易</li>
<li>功能多样</li>
<li>强大的社区</li>
<li>丰富的机器学习库</li>
</ol>
</blockquote>

<!--more-->


<h2><a href="http://scikit-learn.org/stable/">Scikit-learn</a></h2>

<p>GitHub: <a href="https://github.com/scikit-learn/scikit-learn">https://github.com/scikit-learn/scikit-learn</a></p>

<p>Scikit-learn是建立在Scipy和Numpy基础上的机器学习库。包含丰富的分类，回归，聚类，降维，模型选择以及预处理的方法。</p>

<blockquote><p>注：NumPy 是以矩阵为基础的数学计算模块，Scipy是科学计算函数库。NumPy主要是纯数学的函数，Scipy包含一些高阶的抽象模型。</p></blockquote>

<p><img src="https://raw.githubusercontent.com/chenlini/chenlini.github.io/source/source/images/Scikit-learn.png" alt="" /></p>

<h6>其中非监督的学习算法包括：岭回归，lasso回归，Elastic Net，逻辑回归，核函回归，SVM，朴素贝叶斯，决策树，增强算法等。</h6>

<h6>非监督学习算法有K-Means，Affinity propagation，Mean-shift，Spectral clustering，Ward hierarchical clustering（层次聚类），Agglomerative clustering（密度聚类），DBSCAN，Gaussian mixtures。</h6>

<h2><a href="http://deeplearning.net/software/theano/">Theano</a></h2>

<p>Github: <a href="https://github.com/Theano/Theano">https://github.com/Theano/Theano</a></p>

<p>Theano允许你定义、优化和评估涉及多维数组的数学表达式。能够很好的支持NumPy，有完善的文档以及教程，如下图所示。该库比较偏向学术研究，方向为神经网络与深度学习的领域。</p>

<p><img src="https://raw.githubusercontent.com/chenlini/chenlini.github.io/source/source/images/Theano.png" alt="" /></p>

<blockquote><ul>
<li><a href="http://deeplearning.net/software/pylearn2/">Pylearn2</a>就是在Theano基础上建立的，把一些较为常用的深度学习的模型以及训练算法封装成了包，可以直接调用。</li>
<li><a href="https://keras.io/">Keras</a>也是在Theano基础上建立的，是较为流行的，高度模块化的深度学习框架。</li>
</ul>
</blockquote>

<h2><a href="http://www.tensorfly.cn/tfdoc/tutorials/overview.html">Tensorflow</a></h2>

<p>Github: <a href="https://github.com/tensorflow/tensorflow/issues">https://github.com/tensorflow/tensorflow/issues</a></p>

<p>Tensorflow是现在最流行的深度学习库，利用数据流图形进行数值计算。被评选为2016年最值得fork的项目之一。该库主要由C++实现，但是有Python的API。最重要的是有中文社区以及中文文档！</p>

<p>主要的研究方向是<strong>神经网络</strong>。</p>

<p><img src="https://raw.githubusercontent.com/chenlini/chenlini.github.io/source/source/images/tensorflow.png" alt="" /></p>

<h5>其他库：</h5>

<blockquote><ul>
<li><a href="http://pyevolve.sourceforge.net/">Pyevolve</a>:遗传算法</li>
<li><a href="http://www.numenta.org/">nupic</a>:HIM算法（层次时间记忆）</li>
<li><a href="http://www.clips.ua.ac.be/pattern">pattern</a>:web挖掘</li>
<li><a href="http://caffe.berkeleyvision.org/">Caffe</a>:视觉领域</li>
<li><a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/">LibSVM</a>:针对SVM算法</li>
<li><a href="http://nilearn.github.io/">Nilearn</a>:神经影像</li>
<li><a href="http://statsmodels.sourceforge.net/">Statsmodels</a>:基于统计学</li>
<li><a href="http://pymc-devs.github.io/pymc/README.html#purpose">PyMC</a>:贝叶斯统计模型，MCMC等。</li>
<li><a href="http://www.pymvpa.org/">PYMVPA</a>:大数据的统计学习分析</li>
<li><a href="http://radimrehurek.com/gensim/">gensim</a>:自然语言处理，主题模型</li>
<li><a href="https://pypi.python.org/pypi/featureforge">featureforge</a>:专门用来构建或者测试特征的库。</li>
<li><a href="https://pypi.python.org/pypi/vaderSentiment">vaderSentiment</a>:语义分析</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用指令]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/19/linuxchang-yong-zhi-ling/"/>
    <updated>2017-03-19T23:14:19+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/19/linuxchang-yong-zhi-ling</id>
    <content type="html"><![CDATA[<h3>linux</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP and UDP]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/tcp-and-udp/"/>
    <updated>2017-03-15T22:40:05+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/tcp-and-udp</id>
    <content type="html"><![CDATA[<h3>TCP(Transmission Control protocal)</h3>

<p>TCP is based on <strong>connection</strong> which means sending end must creat a stable connection to receiving end. This operation called <strong>three-way handshake</strong>.</p>

<h3>UDP(User Data protocal)</h3>

<p>Data transmission based on UDP don&rsquo;t need to build connection before. The sending post send out data as soon as possible. It doesn&rsquo;t make sure the receiver can receive data completely and correctly.</p>

<!--more-->


<table>
<thead>
<tr>
<th>TCP </th>
<th> UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>reliable and stable</td>
<td> not reliable</td>
</tr>
<tr>
<td>mass of data  </td>
<td> small data</td>
</tr>
<tr>
<td>slow </td>
<td>fast</td>
</tr>
<tr>
<td>O2 byte stream   </td>
<td> O2 message</td>
</tr>
<tr>
<td>one to one</td>
<td> one to many</td>
</tr>
<tr>
<td>more system resource</td>
<td>less system resourse</td>
</tr>
<tr>
<td>HTTP,FTP</td>
<td>QQ Voice QQ video</td>
</tr>
</tbody>
</table>


<p>　　</p>

<h3>UDP应用场景：</h3>

<ol>
<li>面向数据报方式</li>
<li>网络数据大多为短消息</li>
<li>拥有大量Client</li>
<li>对数据安全性无特殊要求</li>
<li>网络负担非常重，但对响应速度要求高</li>
</ol>


<h3>其他区别</h3>

<ol>
<li>socket()的参数不同</li>
<li>UDP Server不需要调用listen和accept</li>
<li>UDP收发数据用sendto/recvfrom函数</li>
<li>TCP：地址信息在connect/accept时确定</li>
<li>UDP：在sendto/recvfrom函数中每次均 需指定地址信息</li>
<li>UDP：shutdown函数无效</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序汇总]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/pai-xu-hui-zong/"/>
    <updated>2017-03-15T22:12:55+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/pai-xu-hui-zong</id>
    <content type="html"><![CDATA[<p>几种简单排序算法实现</p>

<!--more-->


<h2>简单选择排序</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">simpleRank</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">R</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">R</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">R</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">R</span><span class="p">[</span><span class="n">s</span><span class="p">])</span><span class="n">s</span><span class="o">=</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">R</span><span class="p">[</span><span class="n">s</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>时间复杂度O（n<sup>2</sup> ）,是不稳定的排序算法。空间复杂度为O（n）</p>

<h2>直接插入排序</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>   <span class="kt">void</span> <span class="nf">InsertRank</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">R</span><span class="p">){</span>
</span><span class='line'>  
</span><span class='line'>     <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">R</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">tmp</span><span class="o">=</span><span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">tmp</span><span class="o">&lt;</span><span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>          <span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="err">```</span>
</span><span class='line'><span class="err">当原始数据是有序的，直接插入排序最好的时间复杂度是</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="err">）最坏情况为</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="o">^</span><span class="mi">2</span> <span class="err">），是稳定的排序算法。空间复杂度为</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="err">）</span>
</span><span class='line'>
</span><span class='line'><span class="cp">##冒泡排序</span>
</span></code></pre></td></tr></table></div></figure>


<p>cpp
    void maopaoRank(vector<int> R){
    int j=R.size()-1;
        while(j>0){
            int last=0;
            for(int i=0;i&lt;j;i++){
                if(R[i]>R[i+1]){swap(R[i],R[i+1]);
                            last=i;}
            }
            j=last;
        }
    }</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="err">注意并不是一定要进行</span><span class="n">R</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="err">趟，当没有交换的元素的时候就可以结束循环了。当原始数据是有序的，直接插入排序最好的时间复杂度是</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="err">）最坏情况为</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="o">^</span><span class="mi">2</span> <span class="err">），是稳定的排序算法。需要额外的栈资源。</span>
</span><span class='line'>
</span><span class='line'><span class="cp">##快速排序</span>
</span></code></pre></td></tr></table></div></figure>


<p>cpp
        //函数封装
        void QuickSort(vector<int> R){
    Quick(R,0,R.size()-1);
        }
        void Quick(vector<int> R, int left,int right){
    int i,j;
    if(left&lt;right){//待排元素多于一个
        i=left;
        j=right+1;
        do{
            do i++;while(R[i]&lt;R[left]);//寻找第一个大于R[left]的元素
            do j&ndash;;while(R[j]>R[left]);//寻找第一个小于R[left]的元素
            if(i&lt;j)swap(R[i],R[j]);//交换元素，如果此时i>j久不用交换了
        }while(i&lt;j);
        swap(R[left],R[j]);
        Quick(R,left,j-1);//低端
        Quick(R,j,right);//高端
    }}</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="err">快速排序有三种选择分割点的方法：</span>
</span><span class='line'>
</span><span class='line'><span class="mf">1.</span> <span class="n">A</span><span class="p">[(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span><span class="err">作为分割点，与第一个点交换</span>
</span><span class='line'><span class="mf">2.</span> <span class="err">取随机数与第一个点交换</span>
</span><span class='line'><span class="mf">3.</span> <span class="err">比较</span><span class="n">A</span><span class="p">[</span><span class="n">left</span><span class="p">],</span><span class="n">A</span><span class="p">[</span><span class="n">right</span><span class="p">],</span><span class="n">A</span><span class="p">[(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span><span class="err">，取中间的和第一个点交换。</span>
</span><span class='line'>
</span><span class='line'><span class="err">优化方法：先排短的子序列，再排长的子序列。</span>
</span><span class='line'>
</span><span class='line'><span class="err">时间复杂度：平均情况</span><span class="n">O</span><span class="p">(</span><span class="n">nlogn</span><span class="p">)</span><span class="err">，最坏情况为</span><span class="n">O</span><span class="p">(</span><span class="n">n</span><span class="o">^</span><span class="mi">2</span><span class="p">).</span><span class="err">快速排序是不稳定的排序算法。</span>
</span><span class='line'>
</span><span class='line'><span class="cp">##二路合并排序</span>
</span></code></pre></td></tr></table></div></figure>


<p>cpp
include<iostream>
using namespace std;
int * Merge(){
}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[感知机]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/gan-zhi-ji/"/>
    <updated>2017-03-15T19:53:19+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/gan-zhi-ji</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script>


<h4>总结：感知机属于二分类的算法，输入为一系列的特征向量，输出为＋1或者是－1.输入空间到输出空间用的是sign()函数。</h4>

<h3>感知机定义了一个超平面：WX＋B＝0</h3>

<p>其中W为权重向量，X为输入的特征向量，B为误差常数。</p>

<p>对于感知机算法来说，训练数据集如果能够被一个超平面完美的划分成正实例和负实例，则称这个数据集为线性可分的，否则就是线性不可分的。</p>

<!--more-->


<ol>
<li><p>损失函数的定义：</p>

<p> 那么如何评价这个感知机算法构造的分割平面是不是好的呢？最直观的方法就是统计该误分点的个数，但是以此来作为损失函数的话，对于W和B来说并不是连续可导的，因此可以将误分点到分割平面的距离之和作为损失函数来进行优化。</p>

<p> （1）误分点的定义：
     实际上，点到分割平面的距离就是｜WX+B｜除以W的F范数（可以不用考虑）。如果是误分点的话，－y(WX+B)肯定是大于0的，以此代替绝对值符号。</p>

<p> 损失函数最后的形式就是：</p>

<p> $$L(w,b)=\sum_{x_i \in M}y_i(w \bullet x_i+b)$$</p>

<p> 求解方法就是求导之后用梯度下降的方法解决。</p></li>
<li><p>感知机除了这个原始形式以外还有一种对偶的形式。主要的思想是W和B可以表示为实例（x,y）的线性组合。</p></li>
</ol>


<p>注意：</p>

<ol>
<li>感知机是线性模型，不能表示复杂的函数</li>
<li>样本线性可分的充要条件是正向实例构成的凸壳与负向实例构成的凸壳不相交。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入浅出SVM]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/shen-ru-qian-chu-svm/"/>
    <updated>2017-03-15T15:14:26+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/shen-ru-qian-chu-svm</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++中static和const]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/my-first-blog/"/>
    <updated>2017-03-15T15:14:26+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/my-first-blog</id>
    <content type="html"><![CDATA[<p>static是静态常量，const是指类的内部是静态的。
const定义的常量在超出其作用域之后其空间会被释放，而static定义的静态常量在函数执行后不会释放其存储空间。</p>

<!--more-->


<ol>
<li><p>static静态成员变量不能在类的内部初始化。</p></li>
<li><p>const成员变量也不能在类定义处初始化，只能通过构造函数初始化列表进行，并且必须有构造函数。</p></li>
<li>const修饰指针变量时：</li>
</ol>


<p>　　(1)只有一个const，如果const位于*左侧，表示指针所指数据是常量，不能通过解引用修改该数据；指针本身是变量，可以指向其他的内存单元。</p>

<p>　　(2)只有一个const，如果const位于*右侧，表示指针本身是常量，不能指向其他内存地址；指针所指的数据可以通过解引用修改。</p>

<p>　　(3)两个const，*左右各一个，表示指针和指针所指数据都不能修改。</p>

<ol>
<li><p>cosnt成员函数主要目的是防止成员函数修改对象的内容。即const成员函数不能修改成员变量的值，但可以访问成员变量。const成员函数不能调用非const成员函数，因为非const成员函数可以会修改成员变量</p></li>
<li><p>static成员函数主要目的是作为类作用域的全局函数。不能访问类的非静态数据成员。类的静态成员函数没有this指针，这导致：1、不能直接存取类的非静态成员变量，调用非静态成员函数2、不能被声明为const、volatile</p></li>
<li>const static 的成员也只能在外部初始化，而且不带static字样。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">A</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>        <span class="k">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="p">();</span><span class="c1">//静态成员函数  </span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">aa</span><span class="p">;</span><span class="c1">//静态数据成员的声明  </span>
</span><span class='line'>    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span><span class="c1">//常量静态数据成员（可以在构造函数中初始化）  </span>
</span><span class='line'>     <span class="k">const</span> <span class="kt">int</span> <span class="n">bb</span><span class="p">;</span><span class="c1">//常量数据成员  </span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">A</span><span class="o">::</span><span class="n">aa</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//静态成员的定义+初始化  </span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int</span> <span class="n">A</span><span class="o">::</span><span class="n">count</span><span class="o">=</span><span class="mi">25</span><span class="p">;</span><span class="c1">//静态常量成员定义+初始化  </span>
</span><span class='line'>    <span class="n">A</span><span class="o">::</span><span class="n">A</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span><span class="o">:</span><span class="n">bb</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="c1">//常量成员的初始化  </span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="n">aa</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">A</span><span class="o">::</span><span class="n">print</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;count=&quot;</span><span class="o">&lt;&lt;</span><span class="n">count</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;aa=&quot;</span><span class="o">&lt;&lt;</span><span class="n">aa</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">A</span> <span class="n">a</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>        <span class="n">A</span><span class="o">::</span><span class="n">print</span><span class="p">();</span><span class="c1">//通过类访问静态成员函数  </span>
</span><span class='line'>        <span class="n">a</span><span class="p">.</span><span class="n">print</span><span class="p">();</span><span class="c1">//通过对象访问静态成员函数  </span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
