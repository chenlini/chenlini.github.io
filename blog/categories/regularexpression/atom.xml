<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Regularexpression | Chenlini]]></title>
  <link href="http://chenlini.github.io/blog/categories/regularexpression/atom.xml" rel="self"/>
  <link href="http://chenlini.github.io/"/>
  <updated>2017-06-11T00:14:02+08:00</updated>
  <id>http://chenlini.github.io/</id>
  <author>
    <name><![CDATA[Chenlini]]></name>
    <email><![CDATA[chenlini1234@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正则表达式1]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/11/zheng-ze-biao-da-shi-1/"/>
    <updated>2017-06-11T00:10:27+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/11/zheng-ze-biao-da-shi-1</id>
    <content type="html"><![CDATA[<h1>正则表达式</h1>

<h3>1.一般符号</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>. </td>
<td> 匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td>\w </td>
<td> 匹配字母或数字或下划线或汉字 等价于 &lsquo;[^A-Za-z0-9_]&rsquo;</td>
</tr>
<tr>
<td>\s </td>
<td> 匹配空格</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界，比如要匹配I am lily中的am，可以使用\bam\b</td>
</tr>
<tr>
<td>\A</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td>\Z</td>
<td>匹配字符串的结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始，多行时匹配每一行的开头</td>
</tr>
<tr>
<td>$</td>
<td> 匹配字符串的结束，多行时匹配每一行的结束</td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号内的包含的字符，比如[a-z]</td>
</tr>
<tr>
<td>|</td>
<td>匹配左右两边的表达式，优先匹配左边的，如果|不在括号中，作用域就是整个正则表达式。</td>
</tr>
</tbody>
</table>


<!--more-->


<h3>2.反义</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>\W </td>
<td>  匹配任意不是字母，数字，下划线 的字符</td>
</tr>
<tr>
<td>\S</td>
<td>   匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>\D</td>
<td>  匹配任意非数字的字符</td>
</tr>
<tr>
<td>\B</td>
<td>  匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td>[^abc]</td>
<td>  匹配除了abc以外的任意字符</td>
</tr>
</tbody>
</table>


<h3>3.数量相关</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>* </td>
<td> 匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 &ldquo;z&rdquo; 以及 &ldquo;zoo"。</em> 等价于{0,}。</td>
</tr>
<tr>
<td>+ </td>
<td> 匹配前面的子表达式一次或多次。例如，'zo+&lsquo; 能匹配 &ldquo;zo&rdquo; 以及 &ldquo;zoo"，但不能匹配 "z"。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>? </td>
<td>    匹配前面的子表达式零次或一次。例如，"do(es)?&ldquo; 可以匹配 "do&rdquo; 或 &ldquo;does&rdquo; 中的"do" 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>{n} </td>
<td>   n 是一个非负整数。匹配确定的 n 次。例如，'o{2}&lsquo; 不能匹配 &ldquo;Bob&rdquo; 中的 'o'，但是能匹配 &ldquo;food&rdquo; 中的两个 o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>   n 是一个非负整数。至少匹配n 次。例如，'o{2,}&lsquo; 不能匹配 &ldquo;Bob&rdquo; 中的 'o'，但能匹配 &ldquo;foooood&rdquo; 中的所有 o。'o{1,}&rsquo; 等价于 &lsquo;o+'。'o{0,}&rsquo; 则等价于 &lsquo;o*'。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>  m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}&ldquo; 将匹配 "fooooood&rdquo; 中的前三个 o。'o{0,1}&lsquo; 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>*?</td>
<td>   匹配任意次，但尽可能少重复</td>
</tr>
<tr>
<td>+?</td>
<td>  重复1次或更多次，但尽可能少重复</td>
</tr>
<tr>
<td>??</td>
<td>  重复0次或1次，但尽可能少重复</td>
</tr>
<tr>
<td>{n,m}?</td>
<td>  重复n到m次，但尽可能少重复</td>
</tr>
<tr>
<td>{n,}?</td>
<td>   重复n次以上，但尽可能少重复</td>
</tr>
</tbody>
</table>


<h3>4. （）作为分组</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>（）</td>
<td>表示一个分组，每个分组都有一个编号，从1开始递增，分组的后面可以接表示数量的符号。</td>
</tr>
<tr>
<td>（?P<name>）</td>
<td>表示为这个分组增加一个别名</td>
</tr>
<tr>
<td>\数字</td>
<td>“\”后面接一个数字，该数字就是分组的编号，用来引用一个前面的分组</td>
</tr>
<tr>
<td>(?P=name)</td>
<td>name指的是分组的别名，用来用来引用一个前面的分组</td>
</tr>
</tbody>
</table>


<h3>5. （）作为分组不作为分组</h3>

<table>
<thead>
<tr>
<th>符号 </th>
<th> 意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>(?:)</td>
<td>不分组，不分配分组编号</td>
</tr>
<tr>
<td>(?=)</td>
<td>匹配前面的字符的后面必须跟这该括号内的表达式。比如a(?=\d)则匹配后面接着数字的a。</td>
</tr>
<tr>
<td>(?!)</td>
<td>匹配前面的字符的后面不是跟这该括号内的表达式。比如a(?!\d)则匹配后面不是接着数字的a。</td>
</tr>
<tr>
<td>(?&lt;=)</td>
<td>比如a(?&lt;=\d)则匹配前面接着数字的a。</td>
</tr>
<tr>
<td>(?&lt;!)</td>
<td>比如a(?&lt;!\d)则匹配前面不是接着数字的a。</td>
</tr>
<tr>
<td>(?#)</td>
<td>#号后面的内容是注释</td>
</tr>
<tr>
<td>(?(id/name)par1|par2) </td>
<td> 就是如果该编号或者名字的分组匹配到了，那么久匹配par1，如果没有就匹配par2。</td>
</tr>
</tbody>
</table>


<p>实例：</p>

<pre><code>var str = "https://www.runoob.com:80/html/html-tutorial.html";
var patt1 = /(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/;
</code></pre>
]]></content>
  </entry>
  
</feed>
