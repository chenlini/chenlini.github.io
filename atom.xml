<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chenlini]]></title>
  <link href="http://chenlini.github.io/atom.xml" rel="self"/>
  <link href="http://chenlini.github.io/"/>
  <updated>2017-05-16T11:14:13+08:00</updated>
  <id>http://chenlini.github.io/</id>
  <author>
    <name><![CDATA[Chenlini]]></name>
    <email><![CDATA[chenlini1234@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[汉诺塔]]></title>
    <link href="http://chenlini.github.io/blog/2017/05/16/yi-nuo-ta/"/>
    <updated>2017-05-16T10:59:25+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/05/16/yi-nuo-ta</id>
    <content type="html"><![CDATA[<h2>汉诺塔问题</h2>

<p>递归问题
n个盘子，三个柱子。一个柱子为起始柱子，一个为终点柱子，一个为中间柱子。
步骤：</p>

<p>1.将n-1个盘子移到中间柱子。</p>

<p>2.将第n个盘子移到终点柱子。</p>

<p>问题就变成了将n-1个盘子移到终点柱子的问题，重复。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    #include&lt;iostream&gt;
</span><span class='line'>    using namespace std;
</span><span class='line'>    int i;
</span><span class='line'>    void move(int n,char from,char to){
</span><span class='line'>           printf("step %d: the number %d from %c to %c ",i++,n,from,to);
</span><span class='line'>    }
</span><span class='line'>    void Hanio(int n,char start,char end,char mid){
</span><span class='line'>           if(n==1)move(n,start,end);
</span><span class='line'>           else{
</span><span class='line'>                Hanio(n-1,start,mid,end);
</span><span class='line'>                move(n,start,end);
</span><span class='line'>                Hanio(n-1,mid,end,start);
</span><span class='line'>               }
</span><span class='line'>    }
</span><span class='line'>    int main(){
</span><span class='line'>           int n;  
</span><span class='line'>        while(cin&lt;&lt;n){  
</span><span class='line'>        i = 1;   //全局变量赋初始值  
</span><span class='line'>        Hanio(n,'1','2','3');  
</span><span class='line'>        printf("最后总的步数为%d\n",i-1);  
</span><span class='line'>     }  
</span><span class='line'>    return 0; 
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[neo4j(1)]]></title>
    <link href="http://chenlini.github.io/blog/2017/05/14/neo4j-1/"/>
    <updated>2017-05-14T23:53:49+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/05/14/neo4j-1</id>
    <content type="html"><![CDATA[<h1>neo4j安装步骤</h1>

<p>注：</p>

<blockquote><ol>
<li>先安装好java</li>
<li>官网上直接通过apt-get不行</li>
</ol>
</blockquote>

<p>需要到<a href="http://neo4j.com/download/">http://neo4j.com/download/</a> 下载对应的版本，解压安装。</p>

<ol>
<li><p>解压：</p>

<blockquote><p>$ tar –zvxf neo4j-community-3.1.3.-unix.tar.gz</p></blockquote></li>
<li><p>启动neo4j</p>

<blockquote><p>$ ./neo4j console</p></blockquote></li>
<li><p>打开浏览器进入工作环境  <a href="http://localhost/7474">http://localhost/7474</a></p></li>
<li>第一次进入会要求修改用户名和密码，该用户名和密码一定要记住，后面会用到！！！</li>
</ol>


<p>注：最新版的neo4j暂时不需要修改配置文件，如果是以前的版本需要去conf/neo4j-server.properties里面下面这句话前面的注释符删掉。</p>

<pre><code>    #org.neo4j.server.webserver.address=0.0.0.0
</code></pre>

<h1>Python+neo4j 小demo笔记</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>from __future__ import print_function
</span><span class='line'>
</span><span class='line'>import sys
</span><span class='line'>
</span><span class='line'>from py2neo import Graph, Node, Relationship
</span><span class='line'>graph = Graph(
</span><span class='line'>    "http://localhost:7474",
</span><span class='line'>    username="xxx",
</span><span class='line'>    password="xxx"
</span><span class='line'>)
</span><span class='line'>#删除所有的点和边
</span><span class='line'>#graph.delete_all()
</span><span class='line'>#定义点
</span><span class='line'>node_1 = Node(label = "Person",name = "node_1")
</span><span class='line'>node_2 = Node(label = "Person",name = "node_2")
</span><span class='line'>node_3 = Node(label = "Person",name = "node_3")
</span><span class='line'>node_4 = Node(label = "Person",name = "node_4")
</span><span class='line'>node_5 = Node(label = "Person",name = "node_5")
</span><span class='line'>node_6 = Node(label = "Person",name = "node_6")
</span><span class='line'>
</span><span class='line'>#创建点
</span><span class='line'>graph.create(node_1)
</span><span class='line'>graph.create(node_2)
</span><span class='line'>graph.create(node_3)
</span><span class='line'>graph.create(node_4)
</span><span class='line'>graph.create(node_5)
</span><span class='line'>graph.create(node_6)
</span><span class='line'>#定义关系
</span><span class='line'>node_1_F_node_2 = Relationship(node_1,'w12',node_2)
</span><span class='line'>node_1_F_node_3 = Relationship(node_1,'w13',node_3)
</span><span class='line'>node_1_F_node_4 = Relationship(node_1,'w14',node_4)
</span><span class='line'>node_2_F_node_1 = Relationship(node_2,'w21',node_1)
</span><span class='line'>node_2_F_node_3 = Relationship(node_2,'w23',node_3)
</span><span class='line'>node_2_F_node_4 = Relationship(node_2,'w24',node_4)
</span><span class='line'>
</span><span class='line'>node_3_F_node_1 = Relationship(node_3,'w31',node_1)
</span><span class='line'>node_3_F_node_2 = Relationship(node_3,'w32',node_2)
</span><span class='line'>node_3_F_node_4 = Relationship(node_3,'w34',node_4)
</span><span class='line'>
</span><span class='line'>node_4_F_node_1 = Relationship(node_4,'w41',node_1)
</span><span class='line'>node_4_F_node_2 = Relationship(node_4,'w42',node_2)
</span><span class='line'>node_4_F_node_3 = Relationship(node_4,'w43',node_3)
</span><span class='line'>
</span><span class='line'>node_5_F_node_4 = Relationship(node_5,'w54',node_4)
</span><span class='line'>node_4_F_node_5 = Relationship(node_4,'w45',node_5)
</span><span class='line'>node_5_F_node_6 = Relationship(node_5,'w56',node_6)
</span><span class='line'>node_6_F_node_5 = Relationship(node_6,'w65',node_5)
</span><span class='line'>
</span><span class='line'>#为关系设定权重
</span><span class='line'>node_1_F_node_2['weight'] = 1
</span><span class='line'>node_1_F_node_2['weight'] = 2
</span><span class='line'>node_1_F_node_3['weight'] = 1
</span><span class='line'>node_2_F_node_1['weight'] = 2
</span><span class='line'>node_2_F_node_3['weight'] = 1
</span><span class='line'>node_2_F_node_4['weight'] = 2
</span><span class='line'>node_3_F_node_1['weight'] = 1
</span><span class='line'>node_3_F_node_2['weight'] = 2
</span><span class='line'>node_3_F_node_4['weight'] = 1
</span><span class='line'>node_4_F_node_1['weight'] = 2
</span><span class='line'>node_4_F_node_2['weight'] = 1
</span><span class='line'>node_4_F_node_3['weight'] = 2
</span><span class='line'>
</span><span class='line'>node_5_F_node_4['weight'] = 2
</span><span class='line'>node_4_F_node_5['weight'] = 1
</span><span class='line'>node_5_F_node_6['weight'] = 2
</span><span class='line'>node_6_F_node_5['weight'] = 2
</span><span class='line'>#创建关系
</span><span class='line'>graph.create(node_1_F_node_2)
</span><span class='line'>graph.create(node_1_F_node_2)
</span><span class='line'>graph.create(node_1_F_node_3)
</span><span class='line'>graph.create(node_2_F_node_1)
</span><span class='line'>graph.create(node_2_F_node_3)
</span><span class='line'>graph.create(node_2_F_node_4)
</span><span class='line'>graph.create(node_3_F_node_1)
</span><span class='line'>graph.create(node_3_F_node_2)
</span><span class='line'>graph.create(node_3_F_node_4)
</span><span class='line'>graph.create(node_4_F_node_1)
</span><span class='line'>graph.create(node_4_F_node_2)
</span><span class='line'>graph.create(node_4_F_node_3)
</span><span class='line'>
</span><span class='line'>graph.create(node_4_F_node_5)
</span><span class='line'>graph.create(node_5_F_node_4)
</span><span class='line'>graph.create(node_5_F_node_6)
</span><span class='line'>graph.create(node_6_F_node_5)
</span><span class='line'>#更新
</span><span class='line'>node_1_F_node_2['count'] += 1
</span><span class='line'>node_1['name'] = "peter"
</span><span class='line'>graph.push(node_1_F_node_2)
</span><span class='line'>graph.push(node_1)
</span><span class='line'>#查询语句
</span><span class='line'>## find_one返回一个
</span><span class='line'>find_1 = graph.find_one(
</span><span class='line'>  label="Person",
</span><span class='line'>  property_key="name",
</span><span class='line'>  property_value="node_1"
</span><span class='line'>)
</span><span class='line'>#find返回的是游标
</span><span class='line'>findA = graph.find(
</span><span class='line'>    lable="Person"
</span><span class='line'>)
</span><span class='line'>for it in findA:
</span><span class='line'>    print(it['name'])
</span><span class='line'>#查找关系用mactch和macth_one,用法与上面相似，注意start_node和end_node至少有一个
</span><span class='line'># bidirectional指的是否可以是双向的，true表示不考虑方向，false表示必须是start指向end的边
</span><span class='line'>#start_node后面可以是单个的node也可以是查询出来的一系列node.
</span><span class='line'>relationship = graph.match_one(start_node=node_1, end_node=node_2, bidirectional=False)
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<pre><code>
from __future__ import print_function

import sys

from py2neo import Graph, Node, Relationship
graph = Graph(
    "http://localhost:7474",
    username="xxx",
    password="xxx"
)
#删除所有的点和边
#graph.delete_all()
#定义点
node_1 = Node(label = "Person",name = "node_1")
node_2 = Node(label = "Person",name = "node_2")
node_3 = Node(label = "Person",name = "node_3")
node_4 = Node(label = "Person",name = "node_4")
node_5 = Node(label = "Person",name = "node_5")
node_6 = Node(label = "Person",name = "node_6")

#创建点
graph.create(node_1)
graph.create(node_2)
graph.create(node_3)
graph.create(node_4)
graph.create(node_5)
graph.create(node_6)
#定义关系
node_1_F_node_2 = Relationship(node_1,'w12',node_2)
node_1_F_node_3 = Relationship(node_1,'w13',node_3)
node_1_F_node_4 = Relationship(node_1,'w14',node_4)
node_2_F_node_1 = Relationship(node_2,'w21',node_1)
node_2_F_node_3 = Relationship(node_2,'w23',node_3)
node_2_F_node_4 = Relationship(node_2,'w24',node_4)

node_3_F_node_1 = Relationship(node_3,'w31',node_1)
node_3_F_node_2 = Relationship(node_3,'w32',node_2)
node_3_F_node_4 = Relationship(node_3,'w34',node_4)

node_4_F_node_1 = Relationship(node_4,'w41',node_1)
node_4_F_node_2 = Relationship(node_4,'w42',node_2)
node_4_F_node_3 = Relationship(node_4,'w43',node_3)

node_5_F_node_4 = Relationship(node_5,'w54',node_4)
node_4_F_node_5 = Relationship(node_4,'w45',node_5)
node_5_F_node_6 = Relationship(node_5,'w56',node_6)
node_6_F_node_5 = Relationship(node_6,'w65',node_5)

#为关系设定权重
node_1_F_node_2['weight'] = 1
node_1_F_node_2['weight'] = 2
node_1_F_node_3['weight'] = 1
node_2_F_node_1['weight'] = 2
node_2_F_node_3['weight'] = 1
node_2_F_node_4['weight'] = 2
node_3_F_node_1['weight'] = 1
node_3_F_node_2['weight'] = 2
node_3_F_node_4['weight'] = 1
node_4_F_node_1['weight'] = 2
node_4_F_node_2['weight'] = 1
node_4_F_node_3['weight'] = 2

node_5_F_node_4['weight'] = 2
node_4_F_node_5['weight'] = 1
node_5_F_node_6['weight'] = 2
node_6_F_node_5['weight'] = 2
#创建关系
graph.create(node_1_F_node_2)
graph.create(node_1_F_node_2)
graph.create(node_1_F_node_3)
graph.create(node_2_F_node_1)
graph.create(node_2_F_node_3)
graph.create(node_2_F_node_4)
graph.create(node_3_F_node_1)
graph.create(node_3_F_node_2)
graph.create(node_3_F_node_4)
graph.create(node_4_F_node_1)
graph.create(node_4_F_node_2)
graph.create(node_4_F_node_3)

graph.create(node_4_F_node_5)
graph.create(node_5_F_node_4)
graph.create(node_5_F_node_6)
graph.create(node_6_F_node_5)
#更新
node_1_F_node_2['count'] += 1
node_1['name'] = "peter"
graph.push(node_1_F_node_2)
graph.push(node_1)
#查询语句
## find_one返回一个
find_1 = graph.find_one(
  label="Person",
  property_key="name",
  property_value="node_1"
)
#find返回的是游标
findA = graph.find(
    lable="Person"
)
for it in findA:
    print(it['name'])
#查找关系用mactch和macth_one,用法与上面相似，注意start_node和end_node至少有一个
# bidirectional指的是否可以是双向的，true表示不考虑方向，false表示必须是start指向end的边
#start_node后面可以是单个的node也可以是查询出来的一系列node.
relationship = graph.match_one(start_node=node_1, end_node=node_2, bidirectional=False)
</code></pre>

<p><img src="https://raw.githubusercontent.com/chenlini/chenlini.github.io/source/source/images/neo4j.png" alt="" /></p>

<h2>注意问题</h2>

<ol>
<li>在代码测试阶段最好能够及时清理数据库，直接去图形化界面清理即可。用delete语句清理。不然没调试一次都会有数据插入neo4j。</li>
<li>注意建立节点或者是关系之前，都去判断一下该节点或关系是否已经存在，避免出现重复的节点和关系。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby升级]]></title>
    <link href="http://chenlini.github.io/blog/2017/05/14/rubysheng-ji/"/>
    <updated>2017-05-14T23:21:38+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/05/14/rubysheng-ji</id>
    <content type="html"><![CDATA[<h2>Mac升级系统后需要更新ruby</h2>

<p>前段时间学学怎么用octopress写博客，更新了mac版本后就发现不能rake preview了，网上查了一下发现需要更新ruby，中间遇到了一些问题，记录如下：</p>

<p>之前没有通过rvm安装ruby，要更新比较麻烦，因此现在从新安装rvm.</p>

<pre><code>#安装rvm
curl -L https://get.rvm.io | bash -s stable
source ~/.bashrc
source ~/.bash_profile
#查看已知ruby版本
rvm list know
#安装版本
rvm install 2.3.3
</code></pre>

<p>注意：在install的时候可能会出现错误，错误原因是brew需要update，因此需要执行以下语句</p>

<pre><code>brew update
</code></pre>

<p>如果brew update 出现错误，"The /usr/local directory is not writable.&ldquo; 需要去到/usr/local/目录下面执行：</p>

<pre><code>sudo chown -R $(whoami) /usr/local
brew prune
</code></pre>

<p>这样就可以brew update了。</p>

<p>完成ruby的更新之后，发现还是不能rake preview,还是会报错！发现需要重新安装bundler</p>

<pre><code>gem install bundler
</code></pre>

<p>但是重新安装完了之后又又问题了，rake不见了！只能再走一遍。</p>

<pre><code>bundle install
</code></pre>

<h5>补充rvm的命令</h5>

<pre><code>rvm use 2.3.3
#卸载
rvm remote 2.3.3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hive_note]]></title>
    <link href="http://chenlini.github.io/blog/2017/05/13/hive-note/"/>
    <updated>2017-05-13T00:35:27+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/05/13/hive-note</id>
    <content type="html"><![CDATA[<h2>Hive 语句简单优化</h2>

<p>使用Hive的过程中，因为数据倾斜的问题可能会造成效率十分地下，以下记录一些hive的简单语句的优化操作。大部分都来自网络，查资料的时候看到就顺便记录一下。</p>

<!--more-->


<h3>1. 设置</h3>

<pre><code>set Hive.groupby.skewindata=true;
#解决jion造成的倾斜
set Hive.optimize.skewjoin = true;
</code></pre>

<h3>2. 简单统计语句</h3>

<pre><code>#优化前：
select count(distinct id) from table A;
#优化后
select count(*) from (select distinct id from tableA)t;
</code></pre>

<h3>3. 列转行</h3>

<pre><code>#建表
create table A(
colume1 string,
colume2s array&lt;string&gt;
)ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' ; 
COLLECTION ITEMS TERMINATED BY ',' ;
#插入数据，B是原始表格，按照colume1插入数据
insert  overwrite  table  A  
select max(B.colume1),  collect_set(B.colume2)  as  colume2s from B group by B.colume1;

方法2:
create table A as select max(B.colume1),concat_ws(',',collect_set(B.colume2)) as colume2s from B group by B.colume1;
</code></pre>

<h3>4. 多列的distinct</h3>

<pre><code>#优化前 
select t1， count(distinct t2) as t3 from A group by t1;  
#优化后 
select t1， count(*) as t3  
from (select distinct t1， t2 from A) group by t1; 
</code></pre>

<h3>5. 查询的时候还可以通过并行来进行优化</h3>

<pre><code>set Hive.exec.parallel=true;
#默认是8
set Hive.exec.parallel. thread.number=n;
select * from   
(  
select count(t1) from A   
where y = 2017 and m = 1  
union all   
select count(t1) from A   
where y = 2017 and m = 2  
union all   
select count(t1) from A   
where y = 2017 and m = 3  
)t 
</code></pre>

<h3>6. 减少Job数量</h3>

<p>优化实现思路，减少job的数量。
举例，统计购买既物品A又购买物品B的用户的数量。
优化前：</p>

<pre><code>select count(*) 
from
(select distinct user 
from T1 where item = ‘A’) A
join 
(select distinct user 
from T1 where item = ‘B’) B 
on A.user = B.user;
</code></pre>

<p>优化后：</p>

<pre><code>select count(*) 
from T1 group by user
having (count(case when item = ‘A’ then 1 end) &gt; 0
and count(case when item = ‘B’ then 1 end) &gt; 0) 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python_algorithm]]></title>
    <link href="http://chenlini.github.io/blog/2017/04/18/python-algorithm/"/>
    <updated>2017-04-18T13:21:33+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/04/18/python-algorithm</id>
    <content type="html"><![CDATA[<h1>Python 常用的机器学习算法库介绍</h1>

<hr />

<p>Python作为目前最火的学习机器学习算法的语言之一拥有如下三个优点：</p>

<blockquote><ol>
<li>语法简单，上手容易</li>
<li>功能多样</li>
<li>强大的社区</li>
<li>丰富的机器学习库</li>
</ol>
</blockquote>

<!--more-->


<h2><a href="http://scikit-learn.org/stable/">Scikit-learn</a></h2>

<p>GitHub: <a href="https://github.com/scikit-learn/scikit-learn">https://github.com/scikit-learn/scikit-learn</a></p>

<p>Scikit-learn是建立在Scipy和Numpy基础上的机器学习库。包含丰富的分类，回归，聚类，降维，模型选择以及预处理的方法。</p>

<blockquote><p>注：NumPy 是以矩阵为基础的数学计算模块，Scipy是科学计算函数库。NumPy主要是纯数学的函数，Scipy包含一些高阶的抽象模型。</p></blockquote>

<p><img src="https://raw.githubusercontent.com/chenlini/chenlini.github.io/source/source/images/Scikit-learn.png" alt="" /></p>

<h6>其中非监督的学习算法包括：岭回归，lasso回归，Elastic Net，逻辑回归，核函回归，SVM，朴素贝叶斯，决策树，增强算法等。</h6>

<h6>非监督学习算法有K-Means，Affinity propagation，Mean-shift，Spectral clustering，Ward hierarchical clustering（层次聚类），Agglomerative clustering（密度聚类），DBSCAN，Gaussian mixtures。</h6>

<h2><a href="http://deeplearning.net/software/theano/">Theano</a></h2>

<p>Github: <a href="https://github.com/Theano/Theano">https://github.com/Theano/Theano</a></p>

<p>Theano允许你定义、优化和评估涉及多维数组的数学表达式。能够很好的支持NumPy，有完善的文档以及教程，如下图所示。该库比较偏向学术研究，方向为神经网络与深度学习的领域。</p>

<p><img src="https://raw.githubusercontent.com/chenlini/chenlini.github.io/source/source/images/Theano.png" alt="" /></p>

<blockquote><ul>
<li><a href="http://deeplearning.net/software/pylearn2/">Pylearn2</a>就是在Theano基础上建立的，把一些较为常用的深度学习的模型以及训练算法封装成了包，可以直接调用。</li>
<li><a href="https://keras.io/">Keras</a>也是在Theano基础上建立的，是较为流行的，高度模块化的深度学习框架。</li>
</ul>
</blockquote>

<h2><a href="http://www.tensorfly.cn/tfdoc/tutorials/overview.html">Tensorflow</a></h2>

<p>Github: <a href="https://github.com/tensorflow/tensorflow/issues">https://github.com/tensorflow/tensorflow/issues</a></p>

<p>Tensorflow是现在最流行的深度学习库，利用数据流图形进行数值计算。被评选为2016年最值得fork的项目之一。该库主要由C++实现，但是有Python的API。最重要的是有中文社区以及中文文档！</p>

<p>主要的研究方向是<strong>神经网络</strong>。</p>

<p><img src="https://raw.githubusercontent.com/chenlini/chenlini.github.io/source/source/images/tensorflow.png" alt="" /></p>

<h5>其他库：</h5>

<blockquote><ul>
<li><a href="http://pyevolve.sourceforge.net/">Pyevolve</a>:遗传算法</li>
<li><a href="http://www.numenta.org/">nupic</a>:HIM算法（层次时间记忆）</li>
<li><a href="http://www.clips.ua.ac.be/pattern">pattern</a>:web挖掘</li>
<li><a href="http://caffe.berkeleyvision.org/">Caffe</a>:视觉领域</li>
<li><a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/">LibSVM</a>:针对SVM算法</li>
<li><a href="http://nilearn.github.io/">Nilearn</a>:神经影像</li>
<li><a href="http://statsmodels.sourceforge.net/">Statsmodels</a>:基于统计学</li>
<li><a href="http://pymc-devs.github.io/pymc/README.html#purpose">PyMC</a>:贝叶斯统计模型，MCMC等。</li>
<li><a href="http://www.pymvpa.org/">PYMVPA</a>:大数据的统计学习分析</li>
<li><a href="http://radimrehurek.com/gensim/">gensim</a>:自然语言处理，主题模型</li>
<li><a href="https://pypi.python.org/pypi/featureforge">featureforge</a>:专门用来构建或者测试特征的库。</li>
<li><a href="https://pypi.python.org/pypi/vaderSentiment">vaderSentiment</a>:语义分析</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用指令]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/19/linuxchang-yong-zhi-ling/"/>
    <updated>2017-03-19T23:14:19+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/19/linuxchang-yong-zhi-ling</id>
    <content type="html"><![CDATA[<h3>linux</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP and UDP]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/tcp-and-udp/"/>
    <updated>2017-03-15T22:40:05+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/tcp-and-udp</id>
    <content type="html"><![CDATA[<h3>TCP(Transmission Control protocal)</h3>

<p>TCP is based on <strong>connection</strong> which means sending end must creat a stable connection to receiving end. This operation called <strong>three-way handshake</strong>.</p>

<h3>UDP(User Data protocal)</h3>

<p>Data transmission based on UDP don&rsquo;t need to build connection before. The sending post send out data as soon as possible. It doesn&rsquo;t make sure the receiver can receive data completely and correctly.</p>

<!--more-->


<table>
<thead>
<tr>
<th>TCP </th>
<th> UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>reliable and stable</td>
<td> not reliable</td>
</tr>
<tr>
<td>mass of data  </td>
<td> small data</td>
</tr>
<tr>
<td>slow </td>
<td>fast</td>
</tr>
<tr>
<td>O2 byte stream   </td>
<td> O2 message</td>
</tr>
<tr>
<td>one to one</td>
<td> one to many</td>
</tr>
<tr>
<td>more system resource</td>
<td>less system resourse</td>
</tr>
<tr>
<td>HTTP,FTP</td>
<td>QQ Voice QQ video</td>
</tr>
</tbody>
</table>


<p>　　</p>

<h3>UDP应用场景：</h3>

<ol>
<li>面向数据报方式</li>
<li>网络数据大多为短消息</li>
<li>拥有大量Client</li>
<li>对数据安全性无特殊要求</li>
<li>网络负担非常重，但对响应速度要求高</li>
</ol>


<h3>其他区别</h3>

<ol>
<li>socket()的参数不同</li>
<li>UDP Server不需要调用listen和accept</li>
<li>UDP收发数据用sendto/recvfrom函数</li>
<li>TCP：地址信息在connect/accept时确定</li>
<li>UDP：在sendto/recvfrom函数中每次均 需指定地址信息</li>
<li>UDP：shutdown函数无效</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序汇总]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/pai-xu-hui-zong/"/>
    <updated>2017-03-15T22:12:55+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/pai-xu-hui-zong</id>
    <content type="html"><![CDATA[<p>几种简单排序算法实现</p>

<!--more-->


<h2>简单选择排序</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">simpleRank</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">R</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">R</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">R</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">R</span><span class="p">[</span><span class="n">s</span><span class="p">])</span><span class="n">s</span><span class="o">=</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">R</span><span class="p">[</span><span class="n">s</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>时间复杂度O（n<sup>2</sup> ）,是不稳定的排序算法。空间复杂度为O（n）</p>

<h2>直接插入排序</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>   <span class="kt">void</span> <span class="nf">InsertRank</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">R</span><span class="p">){</span>
</span><span class='line'>  
</span><span class='line'>     <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">R</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">tmp</span><span class="o">=</span><span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">tmp</span><span class="o">&lt;</span><span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>          <span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="err">```</span>
</span><span class='line'><span class="err">当原始数据是有序的，直接插入排序最好的时间复杂度是</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="err">）最坏情况为</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="o">^</span><span class="mi">2</span> <span class="err">），是稳定的排序算法。空间复杂度为</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="err">）</span>
</span><span class='line'>
</span><span class='line'><span class="cp">##冒泡排序</span>
</span></code></pre></td></tr></table></div></figure>


<p>cpp
    void maopaoRank(vector<int> R){
    int j=R.size()-1;
        while(j>0){
            int last=0;
            for(int i=0;i&lt;j;i++){
                if(R[i]>R[i+1]){swap(R[i],R[i+1]);
                            last=i;}
            }
            j=last;
        }
    }</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="err">注意并不是一定要进行</span><span class="n">R</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="err">趟，当没有交换的元素的时候就可以结束循环了。当原始数据是有序的，直接插入排序最好的时间复杂度是</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="err">）最坏情况为</span><span class="n">O</span><span class="err">（</span><span class="n">n</span><span class="o">^</span><span class="mi">2</span> <span class="err">），是稳定的排序算法。需要额外的栈资源。</span>
</span><span class='line'>
</span><span class='line'><span class="cp">##快速排序</span>
</span></code></pre></td></tr></table></div></figure>


<p>cpp
        //函数封装
        void QuickSort(vector<int> R){
    Quick(R,0,R.size()-1);
        }
        void Quick(vector<int> R, int left,int right){
    int i,j;
    if(left&lt;right){//待排元素多于一个
        i=left;
        j=right+1;
        do{
            do i++;while(R[i]&lt;R[left]);//寻找第一个大于R[left]的元素
            do j&ndash;;while(R[j]>R[left]);//寻找第一个小于R[left]的元素
            if(i&lt;j)swap(R[i],R[j]);//交换元素，如果此时i>j久不用交换了
        }while(i&lt;j);
        swap(R[left],R[j]);
        Quick(R,left,j-1);//低端
        Quick(R,j,right);//高端
    }}</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="err">快速排序有三种选择分割点的方法：</span>
</span><span class='line'>
</span><span class='line'><span class="mf">1.</span> <span class="n">A</span><span class="p">[(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span><span class="err">作为分割点，与第一个点交换</span>
</span><span class='line'><span class="mf">2.</span> <span class="err">取随机数与第一个点交换</span>
</span><span class='line'><span class="mf">3.</span> <span class="err">比较</span><span class="n">A</span><span class="p">[</span><span class="n">left</span><span class="p">],</span><span class="n">A</span><span class="p">[</span><span class="n">right</span><span class="p">],</span><span class="n">A</span><span class="p">[(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span><span class="err">，取中间的和第一个点交换。</span>
</span><span class='line'>
</span><span class='line'><span class="err">优化方法：先排短的子序列，再排长的子序列。</span>
</span><span class='line'>
</span><span class='line'><span class="err">时间复杂度：平均情况</span><span class="n">O</span><span class="p">(</span><span class="n">nlogn</span><span class="p">)</span><span class="err">，最坏情况为</span><span class="n">O</span><span class="p">(</span><span class="n">n</span><span class="o">^</span><span class="mi">2</span><span class="p">).</span><span class="err">快速排序是不稳定的排序算法。</span>
</span><span class='line'>
</span><span class='line'><span class="cp">##二路合并排序</span>
</span></code></pre></td></tr></table></div></figure>


<p>cpp
include<iostream>
using namespace std;
int * Merge(){
}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[感知机]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/gan-zhi-ji/"/>
    <updated>2017-03-15T19:53:19+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/gan-zhi-ji</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script>


<h4>总结：感知机属于二分类的算法，输入为一系列的特征向量，输出为＋1或者是－1.输入空间到输出空间用的是sign()函数。</h4>

<h3>感知机定义了一个超平面：WX＋B＝0</h3>

<p>其中W为权重向量，X为输入的特征向量，B为误差常数。</p>

<p>对于感知机算法来说，训练数据集如果能够被一个超平面完美的划分成正实例和负实例，则称这个数据集为线性可分的，否则就是线性不可分的。</p>

<!--more-->


<ol>
<li><p>损失函数的定义：</p>

<p> 那么如何评价这个感知机算法构造的分割平面是不是好的呢？最直观的方法就是统计该误分点的个数，但是以此来作为损失函数的话，对于W和B来说并不是连续可导的，因此可以将误分点到分割平面的距离之和作为损失函数来进行优化。</p>

<p> （1）误分点的定义：
     实际上，点到分割平面的距离就是｜WX+B｜除以W的F范数（可以不用考虑）。如果是误分点的话，－y(WX+B)肯定是大于0的，以此代替绝对值符号。</p>

<p> 损失函数最后的形式就是：</p>

<p> $$L(w,b)=\sum_{x_i \in M}y_i(w \bullet x_i+b)$$</p>

<p> 求解方法就是求导之后用梯度下降的方法解决。</p></li>
<li><p>感知机除了这个原始形式以外还有一种对偶的形式。主要的思想是W和B可以表示为实例（x,y）的线性组合。</p></li>
</ol>


<p>注意：</p>

<ol>
<li>感知机是线性模型，不能表示复杂的函数</li>
<li>样本线性可分的充要条件是正向实例构成的凸壳与负向实例构成的凸壳不相交。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入浅出SVM]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/shen-ru-qian-chu-svm/"/>
    <updated>2017-03-15T15:14:26+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/shen-ru-qian-chu-svm</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++中static和const]]></title>
    <link href="http://chenlini.github.io/blog/2017/03/15/my-first-blog/"/>
    <updated>2017-03-15T15:14:26+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/03/15/my-first-blog</id>
    <content type="html"><![CDATA[<p>static是静态常量，const是指类的内部是静态的。
const定义的常量在超出其作用域之后其空间会被释放，而static定义的静态常量在函数执行后不会释放其存储空间。</p>

<!--more-->


<ol>
<li><p>static静态成员变量不能在类的内部初始化。</p></li>
<li><p>const成员变量也不能在类定义处初始化，只能通过构造函数初始化列表进行，并且必须有构造函数。</p></li>
<li>const修饰指针变量时：</li>
</ol>


<p>　　(1)只有一个const，如果const位于*左侧，表示指针所指数据是常量，不能通过解引用修改该数据；指针本身是变量，可以指向其他的内存单元。</p>

<p>　　(2)只有一个const，如果const位于*右侧，表示指针本身是常量，不能指向其他内存地址；指针所指的数据可以通过解引用修改。</p>

<p>　　(3)两个const，*左右各一个，表示指针和指针所指数据都不能修改。</p>

<ol>
<li><p>cosnt成员函数主要目的是防止成员函数修改对象的内容。即const成员函数不能修改成员变量的值，但可以访问成员变量。const成员函数不能调用非const成员函数，因为非const成员函数可以会修改成员变量</p></li>
<li><p>static成员函数主要目的是作为类作用域的全局函数。不能访问类的非静态数据成员。类的静态成员函数没有this指针，这导致：1、不能直接存取类的非静态成员变量，调用非静态成员函数2、不能被声明为const、volatile</p></li>
<li>const static 的成员也只能在外部初始化，而且不带static字样。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">A</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>        <span class="k">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="p">();</span><span class="c1">//静态成员函数  </span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">aa</span><span class="p">;</span><span class="c1">//静态数据成员的声明  </span>
</span><span class='line'>    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span><span class="c1">//常量静态数据成员（可以在构造函数中初始化）  </span>
</span><span class='line'>     <span class="k">const</span> <span class="kt">int</span> <span class="n">bb</span><span class="p">;</span><span class="c1">//常量数据成员  </span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">A</span><span class="o">::</span><span class="n">aa</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//静态成员的定义+初始化  </span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int</span> <span class="n">A</span><span class="o">::</span><span class="n">count</span><span class="o">=</span><span class="mi">25</span><span class="p">;</span><span class="c1">//静态常量成员定义+初始化  </span>
</span><span class='line'>    <span class="n">A</span><span class="o">::</span><span class="n">A</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span><span class="o">:</span><span class="n">bb</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="c1">//常量成员的初始化  </span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="n">aa</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">A</span><span class="o">::</span><span class="n">print</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;count=&quot;</span><span class="o">&lt;&lt;</span><span class="n">count</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;aa=&quot;</span><span class="o">&lt;&lt;</span><span class="n">aa</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">A</span> <span class="n">a</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>        <span class="n">A</span><span class="o">::</span><span class="n">print</span><span class="p">();</span><span class="c1">//通过类访问静态成员函数  </span>
</span><span class='line'>        <span class="n">a</span><span class="p">.</span><span class="n">print</span><span class="p">();</span><span class="c1">//通过对象访问静态成员函数  </span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
