<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Chenlini]]></title>
  <link href="http://chenlini.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://chenlini.github.io/"/>
  <updated>2017-06-13T17:03:30+08:00</updated>
  <id>http://chenlini.github.io/</id>
  <author>
    <name><![CDATA[Chenlini]]></name>
    <email><![CDATA[chenlini1234@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[抽象类和接口]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/12/chou-xiang-lei-he-jie-kou/"/>
    <updated>2017-06-12T17:31:48+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/12/chou-xiang-lei-he-jie-kou</id>
    <content type="html"><![CDATA[<h1>java基础知识&ndash;抽象类和接口的区别</h1>

<h2>1. 抽象类</h2>

<p>抽象类就是为了实现面向对象设计的，因此必然是为了能够被继承。</p>

<blockquote><p>1）抽象方法默认为public。可以是protected，但是不能是private。</p>

<p>2）抽象类不能直接创建一个对象；</p>

<p>3）子类必须实现父类所有的抽象方法。否则的话必须定义该子类也是抽象类。</p>

<p>4)抽象类中也可以有不是abstract的成员方法和数据成员。</p>

<pre><code>abstract class Class1 {
    abstract void method();
}
</code></pre></blockquote>

<h2>2.接口</h2>

<p>接口同样是为了实现面向对象而设计的。但是接口中的数据成员都是默认为public static final的,但是一般不会定义数据成员，而所有的成员函数都是public abstract的。</p>

<pre><code>interface interface1{
    void method();
}
</code></pre>

<h2>两者区别</h2>

<blockquote><ol>
<li>抽象类可以多种类型的数据成员以及成员函数，因此抽象类可以定义一些默认的行为。接口只能有abstract的函数以及public static final的数据成员。</li>
<li>一个类只能继承自一个对象，但是可以实现多个接口。</li>
<li>设计理念：其实abstract class表示的是"is-a"关系，interface表示的是"like-a"关系。 要明确设计理念，该类的本质是什么，实现了哪些方法。可以查找AlarmDoor的例子。</li>
<li>注意接口的数据成员必须赋予初始值，使得实现的类无法改变该值。抽象类中的数据成员默认为friendly类型。</li>
</ol>
</blockquote>

<p>参考资料：
<a href="http://www.cnblogs.com/beanmoon/archive/2012/12/06/2805221.html">http://www.cnblogs.com/beanmoon/archive/2012/12/06/2805221.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java并行编程(1)]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/11/javabing-xing-bian-cheng-1/"/>
    <updated>2017-06-11T21:15:14+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/11/javabing-xing-bian-cheng-1</id>
    <content type="html"><![CDATA[<h1>Java并行编程（1）实现多线程的方法</h1>

<h3>简单基础知识：</h3>

<p>java的并发编程一定要考虑四个方面的内容。</p>

<blockquote><ol>
<li><p>共享性：当多个线程共享一份数据的时候就会有数据的安全问题。</p></li>
<li><p>互斥性：最基本的就是需要保证数据在同一时间只被一个线程锁修改。</p></li>
<li><p>原子性：类似于数据库的一致性，在数据修改到一半的时候，又被其他的操作修改。</p></li>
<li><p>可见性：比如线程1对数据进行了修改，但是还没有同步到最终版本，因此线程2对这次就该就是不可见的，会出现问题。</p></li>
<li><p>有序性:编译器会对代码做重排序的操作，这种排序有可能遵照原始线程的代码顺序，也可能是无序的优化，会有线程不安全的问题。</p></li>
</ol>
</blockquote>

<!--more-->


<p>java中主要有以下几种实现多线程的方法：</p>

<ol>
<li>继承Thread类</li>
</ol>


<pre><code>class Mytest extends Thread{
    private int num = 8;
    public void run(){
        for (int i=0;i&lt;4;i++)
        {
            if(num &gt; 0){
                System.out.print(num);num--;
            }
        }
    }
}
public class javatest {

    public static void main(String args[]) {
        new Mytest().start();
        new Mytest().start();
        new Mytest().start();
    }
}
</code></pre>

<p>输出的是：876587658765
这里new了三个Thread对象，每个对象是互不干扰的，因此相当于做了三遍操作。</p>

<ol>
<li>实现Runnable接口</li>
</ol>


<pre><code>class Mytest  implements Runnable{
    private int num = 8;
    public void run(){
        for (int i=0;i&lt;10;i++)
        {
            if(num &gt; 0){
               System.out.print(num);num--;            }
        }
    }
}
public class javatest {

    public static void main(String args[]) {
        Mytest test=new Mytest();
        new Thread(test).start();
        new Thread(test).start();
    }
}
</code></pre>

<p>输出的是：87654321
这里同样new了两个Thread，但是它们操作的是一个Runnable对象，虽然这里顺序是对的，但是是有可能出现86754312的情况的。这里就需要用到下一节讲到的同步方法：synchronized</p>

<ol>
<li>匿名的多线程方法：</li>
</ol>


<pre><code>lass Mytest  {
    private int num = 8;
    public void method(){
        for (int i=0;i&lt;4;i++)
        {
            if(num &gt; 0){
                System.out.print(num);num--;
            }
        }
    }
}
public class javatest {

    public static void main(String args[]) {
        Mytest test =new Mytest();
        new Thread(new Runnable() {
            public void run() {
                test.method();
            }
        }).start();
        new Thread(new Runnable() {
            public void run() {
                test.method();
            }
        }).start();
    }
}
</code></pre>

<p>方法3的作用和方法2是一样的，只不过是匿名的线程，同时也更加灵活，可以让每个线程执行不同的内容。方法3还可以改成lambda的形式：</p>

<pre><code>public static void main(String args[]) {
        Mytest test =new Mytest();
        new Thread(() -&gt; {
            test.method();
        }).start();
        new Thread(() -&gt; {
            test.method();
        }).start();
    }
</code></pre>

<p>参考材料：
<a href="http://www.cnblogs.com/paddix/p/5374810.html">http://www.cnblogs.com/paddix/p/5374810.html</a>
<a href="http://blog.csdn.net/ns_code/article/details/17161237">http://blog.csdn.net/ns_code/article/details/17161237</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javaNote]]></title>
    <link href="http://chenlini.github.io/blog/2017/06/10/javanote/"/>
    <updated>2017-06-10T22:17:52+08:00</updated>
    <id>http://chenlini.github.io/blog/2017/06/10/javanote</id>
    <content type="html"><![CDATA[<h1>java中的容器</h1>

<blockquote><p>List</p>

<blockquote><p><a href="#1.1">ArrayList</a></p>

<p><a href="#1.2">linkedList</a></p></blockquote>

<p>Map</p>

<blockquote><p><a href="#2.1">HashTable</a></p>

<p><a href="#2.2">HashMap</a></p>

<p><a href="#2.3">LinkedHashMap</a></p>

<p><a href="#2.4">Treemap</a></p>

<p><a href="#2.5">WeekHashMap</a></p>

<p><a href="#2.6">ConcurrentHashMap</a></p>

<p><a href="#2.7">IdentityHashMap</a></p></blockquote>

<p>Set</p>

<blockquote><p><a href="#3.1">HashSet</a></p>

<p><a href="#3.2">LinkedHashSet</a></p>

<p><a href="#3.3">TreeSet</a></p></blockquote>

<p><a href="#4.1">Queue</a></p>

<p><a href="#4.2">Deque</a></p></blockquote>

<!--more-->


<h3 id="1.1">1.1 ArrayList</h3>


<p>ArrayList实现了可变大小的数组,相当于动态数组,存储在连续的地址空间。它允许所有元素，包括null。ArrayList没有同步。</p>

<blockquote><p>ArrayList 实现了RandmoAccess接口，即提供了随机访问功能。</p>

<p>ArrayList 函数clone()，能被克隆。</p>

<p>ArrayList 实现java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输。</p>

<p>ArrayList中的操作不是线程安全的！所以，建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。</p></blockquote>

<p>现在基本上不怎么用vector了，大部分的性质和ArrayList一样，但是vector是线程安全的。</p>

<h4>方法：</h4>

<pre><code>// Collection中定义的API
boolean             add(E object)
boolean             addAll(Collection&lt;? extends E&gt; collection)
void                clear()
boolean             contains(Object object)
boolean             containsAll(Collection&lt;?&gt; collection)
boolean             equals(Object object)
int                 hashCode()
boolean             isEmpty()
Iterator&lt;E&gt;         iterator()
boolean             remove(Object object)
boolean             removeAll(Collection&lt;?&gt; collection)
boolean             retainAll(Collection&lt;?&gt; collection)
int                 size()
&lt;T&gt; T[]             toArray(T[] array)
Object[]            toArray()
// AbstractCollection中定义的API
void                add(int location, E object)
boolean             addAll(int location, Collection&lt;? extends E&gt; collection)
E                   get(int location)
int                 indexOf(Object object)
int                 lastIndexOf(Object object)
ListIterator&lt;E&gt;     listIterator(int location)
ListIterator&lt;E&gt;     listIterator()
E                   remove(int location)
E                   set(int location, E object)
List&lt;E&gt;             subList(int start, int end)
// ArrayList新增的API
Object               clone()
void                 ensureCapacity(int minimumCapacity)
void                 trimToSize()
void                 removeRange(int fromIndex, int toIndex)
</code></pre>

<blockquote><p>每个ArrayList实例都有一个容量（Capacity），即用于存储元素的数组的大小。这个容量可随着不断添加新元素而自动增加，但是增长算法并没有定义。当需要插入大量元素时，在插入前可以调用ensureCapacity方法来增加ArrayList的容量以提高插入效率。</p></blockquote>

<h3>特性</h3>

<p>(1) ArrayList 通过一个数组去保存数据的。当我们构造ArrayList时，若使用默认构造函数，设置默认的大小，当容量不足时再设置新的容量。</p>

<p>(2) java.io.Serializable的方式。当写入到输出流时，先写入“容量”，再依次写入“每一个元素”；当读出输入流时，先读取“容量”，再依次读取“每一个元素”。</p>

<h3>遍历方式</h3>

<blockquote><p>（1）Iterater
（2）随机访问，get(i)
（3）循环 for(m:list)</p></blockquote>

<h3 id="1.2">1.2 linkedList </h3>


<p>linkedList是双向循环链表，继承AbstractSequentialList 抽象类，实现了List，Deque，Cloneable，Serializable 几个接口。</p>

<h4>方法：</h4>

<pre><code>boolean             add(E object)
void                add(int location, E object)
public void addFirst(E e)   VS   public boolean offerFirst(E e)
public void addLast(E e)   VS  public boolean offerLast(E e)
public void clear()
public boolean contains(Object o)
public int indexOf(Object o)
public E element()等于public E getFirst()
public E get(int index)  
public E set(int index, E element)
public E getLast()
public int lastIndexOf(Object o)
public boolean offer(E e)
public E peek()  VS getfirst()  VS  peekFirst()
public E peekLast()  VS getlast()
public E poll() VS pollFirst()  VS  removeFirst()
public E pollLast()  VS   removeLast()
public E pop() 等于 removeFirst()
public void push(E e)  等于 addFirst()
public E remove() 等于 removeFirst()
public E remove(int index)
public boolean remove(Object o)
public boolean removeFirstOccurrence(Object o)
public boolean removeLastOccurrence(Object o)

public Object clone()
public Object[] toArray()
</code></pre>

<h4>迭代器</h4>

<pre><code>ListIterator&lt;String&gt; itr = list.listIterator();
          while (itr.hasNext()) {
              System.out.println(itr.next());
          }
</code></pre>

<p>还有一个反向的迭代器叫做DescendingIterator</p>

<h3 id="2.1">2.1 HashTable </h3>


<blockquote><p>（1）hashTable存储的是键值对。</p>

<p>（2）通过单链表解决冲突问题，容量不足时，自动增长。</p>

<p>（3）线程安全的</p>

<p>（4）实现了Serializable,Cloneable接口.</p></blockquote>

<h4>方法：</h4>

<pre><code>public synchronized V put(K key, V value)
public synchronized V get(Object key) 
public synchronized V remove(Object key)
\\函数很多省略
</code></pre>

<p>HashTable的迭代器：</p>

<pre><code>    Map&lt;Integer,String&gt; m=new HashMap&lt;&gt;();
        m.put(3, "Value3");
        for(Iterator t=m.keySet().iterator();t.hasNext();){
            String   key   =   (String)   t.next();
            Object   value   =   m.get(key);
        }
</code></pre>

<h3 id="2.2">2.2 HashMap </h3>


<ol>
<li>HashMap默认的initialCapacity为16，loadFactor为0.75：</li>
</ol>


<blockquote><p>HashMap()：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。</p>

<p>HashMap(int initialCapacity)：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。</p>

<p>HashMap(int initialCapacity, float loadFactor)：以指定初始容量、指定的负载因子创建一个 HashMap。</p></blockquote>

<ol>
<li><p>HashMap允许存放null键和null值。key值只允许有一个null，value则可以允许有多个null。当key为null时，键值对永远都放在以table[0]为头结点的链表中。</p></li>
<li><p>每次根据hashCode()计算键值对存放的位置，还会用equals判断key是否一样，如果一样的化，新的值将会覆盖旧的值，如果不一样的话，新的键值对会插入到相应位置的头部。</p></li>
<li><p>是动态的链表，会根据threshold扩容，当数据量超过threshold就会扩容，容量增大一倍。</p></li>
<li><p>hashMap不是线程安全的</p></li>
<li>因为包含空值，所以不能通过get函数的返回值来判断是非包含某个key或者value，应该使用containKey或者是containValue.</li>
<li>clear()方法，清空Map</li>
</ol>


<h3 id="2.3">2.3 LinkedHashMap </h3>


<p>LinkedHashMap是HashMap的子类，LinkedHashMap维护一个双向链表来保存插入数据或者访问数据的顺序，HashMap遍历的时候，顺序是未知的。同样可以有null的key和value。也不是线程安全的。</p>

<h3>注意</h3>

<p>LinkedHashMap默认根据插入的顺序来维护这个双向链表，但是它也支持访问的顺序。网上看到一个例子：</p>

<p><strong>例子</strong>
如果你想构造一个LinkedHashMap，并打算按从近期访问最少到近期访问最多的顺序（即访问顺序）来保存元素，那么请使用下面的构造方法构造LinkedHashMap：</p>

<pre><code>public LinkedHashMap(int initialCapacity,  
         float loadFactor,  
                     boolean accessOrder) {  
    super(initialCapacity, loadFactor);  
    this.accessOrder = accessOrder;  
}
</code></pre>

<p>LinkedHashMap提供了removeEldestEntry(Map.Entry&lt;K,V> eldest)方法。该方法可以提供在每次添加新条目时移除最旧条目的实现程序，默认返回false，这样，此映射的行为将类似于正常映射，即永远不能移除最旧的元素。</p>

<p>重写此方法，维持此映射只保存100个条目的稳定状态，在每次添加新条目时删除最旧的条目。</p>

<pre><code class="">private static final int MAX_ENTRIES = 100;  
protected boolean removeEldestEntry(Map.Entry eldest) {  
    return size() &gt; MAX_ENTRIES;  
}  
</code></pre>

<h3 id="2.4">2.4 Treemap </h3>


<p>Treemap实际上就是用红黑树实现的Map。红黑树的原理可以参考：</p>

<p>Treemap中的插入删除等操作都是遵循红黑树的插入删除算法。</p>

<h3 id="2.5">2.5 WeakHashMap </h3>


<p>WeakHashMap的键是“弱键”。也就是说weakHashMap的键没有其他地方的引用的时候，就会被回收。WeakHashMap中所有的值都是保存在一个table中的，当某“弱键”不再被其它对象引用，会被回收，这个“弱键”会被添加到ReferenceQueue(queue)队列中，下一次同步这个table和队列就可以了。</p>

<h3 id="2.6">2.6 ConcurrentHashMap </h3>


<p>实际上HashMap是线程不安全的，因此在多线程的情况下使用hashMap的put操作时，会引发死循环。而HashTable因为锁机制使得它效率比较低，不允许同时进行put操作。ConcurrentHashMap就是介于这两者之间，采用分段锁机制，使其可以被并行使用。把数据分成多段，给每一段数据都分配一把锁，同一段数据内部不允许同时操作，不同段的数据可以同时操作，因此提高了它的效率。</p>

<h3 id="2.7">2.7 IdentityHashMap </h3>


<p>IdentityHashMap会允许Key值重复。个人理解是IdentityHashMap认为key和value都相等的话，才认为是重复的，不然不认为是重复的。</p>

<h3 id="3.1">3.1 HashSet </h3>


<p>HashSet是基于HashMap实现的，底层采用HashMap来存储元素。也就是说HashSet中的元素都是存在HashMap的Key中的。</p>

<h4>注意：</h4>

<p>HashSet 中判断两个对象相等需要满足两个要求：</p>

<p>（1）通过 equals() 方法判断比较返回 true</p>

<p>（2）两个对象的 hashCode() 返回值相等</p>

<p>所以当使用某个类的对象作为key值存入hashMap中时，需要注意重写equals()方法和hashCode() 方法。</p>

<h3 id="3.2">3.2 LinkedHashSet </h3>


<p>LinkedHashSet以元素插入的顺序来维护集合的链接表，允许以插入的顺序在集合中迭代。其实LinkedHashSet是对LinkedHashMap的简单包装。</p>

<h3 id="3.3">3.3 TreeSet </h3>


<blockquote><ul>
<li><p>提供一个使用树结构存储Set接口的实现，对象以升序顺序存储，访问和遍历的时间很快。</p></li>
<li><p>TreeSet中的元素支持2种排序方式：</p>

<blockquote><p>自然排序
根据Comparator 进行排序。</p></blockquote></li>
<li><p>TreeSet是非同步的。</p></li>
<li><p>TreeSet不支持快速随机遍历，只能通过迭代器进行遍历。有Iterator和descendingIterator。</p></li>
</ul>
</blockquote>

<h3 id="4.1"> Queue </h3>


<p>在java里面，Queue是借口，有很多种实现，以下是实现了Queue的一些类。AbstractQueue, ArrayBlockingQueue, ConcurrentLinkedQueue, LinkedBlockingQueue, DelayQueue, LinkedList, PriorityBlockingQueue, PriorityQueue和ArrayDqueue。</p>

<p>其中用的最多的是linkedList实现的。</p>

<h4>方法：</h4>

<pre><code>
boolean add(E e);  
boolean add(E e);  
boolean offer(E e);  
void addFirst(E e);    
void addLast(E e);    
boolean offerFirst(E e);    
boolean offerLast(E e);
E removeFirst();    
E removeLast();    
E pollFirst();    
E pollLast();    
E remove();    
E poll(); 
E getFirst();   
E getLast();    
E peekFirst();    
E peekLast();    
E element();    
E peek(); 
</code></pre>

<p>PriorityQueue:</p>

<h3 id="4.2">Deque </h3>


<p>Deque是双向队列，继承自queue。区别在于Deque可以实现stack的功能，也就是先进后出的功能。</p>

<pre><code>public interface Deque&lt;E&gt; extends Queue&lt;E&gt; {//继承自Queue接口并进行扩展，支持双端操作  
    void addFirst(E e);//将指定元素插入此双端队列的开头。如果此队列有容量限制且当前没有可用空间，则抛出异常  
    void addLast(E e);//将指定元素插入此双端队列的末尾。如果此队列有容量限制且当前没有可用空间，则抛出异常  
    boolean offerFirst(E e);//将指定的元素插入此双端队列的开头。如果此队列有容量限制且当前没有可用空间，false  
    boolean offerLast(E e);//将指定的元素插入此双端队列的末尾。如果此队列有容量限制且当前没有可用空间，false  
    E removeFirst();//获取并移除此双端队列第一个元素;如果此队列为空，则抛出异常。  
    E removeLast();//获取并移除此双端队列最后一个元素;如果此队列为空，则抛出异常。  
    E pollFirst();//获取并移除此双端队列第一个元素;如果此队列为空，则返回 null。  
    E pollLast();//获取并移除此双端队列最后一个元素;如果此队列为空，则返回 null。  
    E getFirst();//获取但不移除此队列的头；如果此队列为空，则抛出异常。  
    E getLast();//获取但不移除此双端队列最后一个元素；如果此队列为空，则抛出异常  
    E peekFirst();//获取但不移除此队列的头；如果此队列为空，则返回 null。  
    E peekLast();//获取但不移除此队列的头；如果此队列为空，则返回 null。  
    boolean removeFirstOccurrence(Object o);//从此双端队列移除第一次出现的指定元素。如果此双端队列不包含该元素，则不作更改  
    boolean removeLastOccurrence(Object o);//从此双端队列移除最后一次出现的指定元素。如果此双端队列不包含该元素，则不作更改  
    boolean add(E e);//等效于addLast  
    boolean offer(E e);//等效于offerLast  
    E remove();//等效于 removeFirst()。   
    E poll();//此方法等效于 pollFirst()。   
    E element();//此方法等效于 getFirst()。  
    E peek();//此方法等效于 peekFirst()。  
    void push(E e);//此方法等效于 addFirst(E)。  
    E pop();//此方法等效于 removeFirst()。  
    boolean remove(Object o);//此方法等效于 removeFirstOccurrence(java.lang.Object)。  
    boolean contains(Object o);//如果此双端队列包含指定元素，则返回 true  
    public int size();//返回此双端队列的元素数。  
    Iterator&lt;E&gt; iterator();//返回以恰当顺序在此双端队列的元素上进行迭代的迭代器  
    Iterator&lt;E&gt; descendingIterator();//返回以逆向顺序在此双端队列的元素上进行迭代的迭代器  

} 
</code></pre>

<p>参考链接：</p>

<p><a href="http://www.cnblogs.com/skywang12345/p/3308556.html">http://www.cnblogs.com/skywang12345/p/3308556.html</a>
<a href="http://blog.csdn.net/hla199106/article/details/46912615">http://blog.csdn.net/hla199106/article/details/46912615</a>
<a href="http://blog.csdn.net/hello_zihan/article/details/52997816">http://blog.csdn.net/hello_zihan/article/details/52997816</a></p>
]]></content>
  </entry>
  
</feed>
